-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity svm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    class_hw : OUT STD_LOGIC_VECTOR (15 downto 0);
    class_hw_ap_vld : OUT STD_LOGIC;
    x_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of svm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "svm,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=403261,HLS_SYN_TPT=none,HLS_SYN_MEM=68,HLS_SYN_DSP=45,HLS_SYN_FF=3517,HLS_SYN_LUT=6184,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (57 downto 0) := "0000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (57 downto 0) := "0000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (57 downto 0) := "0000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (57 downto 0) := "0000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (57 downto 0) := "0000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (57 downto 0) := "0000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (57 downto 0) := "0001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (57 downto 0) := "0010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (57 downto 0) := "0100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (57 downto 0) := "1000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_C0068B43A0000000 : STD_LOGIC_VECTOR (63 downto 0) := "1100000000000110100010110100001110100000000000000000000000000000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv64_C020000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1100000000100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv11_4C6 : STD_LOGIC_VECTOR (10 downto 0) := "10011000110";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal SupVec_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal SupVec_ce0 : STD_LOGIC;
    signal SupVec_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Co_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Co_ce0 : STD_LOGIC;
    signal Co_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_205 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_189_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_210 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal i_1_fu_222_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_reg_347 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_352 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_256_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_reg_357 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_1_fu_319_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_365 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_load_reg_385 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal SupVec_load_reg_390 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dif_reg_395 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal Co_load_reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_200_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_416 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_183_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_421 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal sum_reg_124 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_136 : STD_LOGIC_VECTOR (10 downto 0);
    signal norm_reg_147 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_159 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_cast_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_170_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_170_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_179_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_183_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_14_fu_232_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_15_fu_244_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_fu_252_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_cast_fu_240_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_to_int_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_266_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_276_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_330_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_334_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_170_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (57 downto 0);

    component svm_faddfsub_32nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component svm_fmul_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component svm_fpext_32ns_64dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component svm_dadd_64ns_64neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component svm_dmul_64ns_64nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component svm_dcmp_64ns_64ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component svm_dexp_64ns_64nhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component svm_SupVec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component svm_Co IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    SupVec_U : component svm_SupVec
    generic map (
        DataWidth => 32,
        AddressRange => 21996,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SupVec_address0,
        ce0 => SupVec_ce0,
        q0 => SupVec_q0);

    Co_U : component svm_Co
    generic map (
        DataWidth => 32,
        AddressRange => 1222,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Co_address0,
        ce0 => Co_ce0,
        q0 => Co_q0);

    svm_faddfsub_32nsbkb_U1 : component svm_faddfsub_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_170_p0,
        din1 => grp_fu_170_p1,
        opcode => grp_fu_170_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_170_p2);

    svm_fmul_32ns_32ncud_U2 : component svm_fmul_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dif_reg_395,
        din1 => dif_reg_395,
        ce => ap_const_logic_1,
        dout => grp_fu_175_p2);

    svm_fpext_32ns_64dEe_U3 : component svm_fpext_32ns_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_179_p0,
        dout => grp_fu_179_p1);

    svm_dadd_64ns_64neOg_U4 : component svm_dadd_64ns_64neOg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_183_p0,
        din1 => grp_fu_183_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_183_p2);

    svm_dmul_64ns_64nfYi_U5 : component svm_dmul_64ns_64nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_205,
        din1 => grp_fu_189_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_189_p2);

    svm_dcmp_64ns_64ng8j_U6 : component svm_dcmp_64ns_64ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => sum_reg_124,
        din1 => ap_const_lv64_0,
        opcode => ap_const_lv5_2,
        dout => tmp_12_fu_194_p2);

    svm_dexp_64ns_64nhbi_U7 : component svm_dexp_64ns_64nhbi
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => reg_210,
        ce => ap_const_logic_1,
        dout => grp_fu_200_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                i_reg_136 <= i_1_reg_347;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_136 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j_reg_159 <= j_1_reg_365;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_216_p2 = ap_const_lv1_0))) then 
                j_reg_159 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    norm_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                norm_reg_147 <= grp_fu_170_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_216_p2 = ap_const_lv1_0))) then 
                norm_reg_147 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                sum_reg_124 <= grp_fu_183_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_reg_124 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                Co_load_reg_411 <= Co_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                SupVec_load_reg_390 <= SupVec_q0;
                x_load_reg_385 <= x_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                dif_reg_395 <= grp_fu_170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_347 <= i_1_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_365 <= j_1_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_313_p2 = ap_const_lv1_1)))) then
                reg_205 <= grp_fu_179_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state24))) then
                reg_210 <= grp_fu_189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_216_p2 = ap_const_lv1_0))) then
                    tmp_16_reg_357(15 downto 1) <= tmp_16_fu_256_p2(15 downto 1);
                    tmp_1_reg_352(10 downto 0) <= tmp_1_fu_228_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                tmp_5_reg_416 <= grp_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                tmp_7_reg_421 <= grp_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_8_reg_401 <= grp_fu_175_p2;
            end if;
        end if;
    end process;
    tmp_1_reg_352(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    tmp_16_reg_357(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond_fu_313_p2, ap_CS_fsm_state2, exitcond1_fu_216_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_216_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_313_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Co_address0 <= tmp_1_reg_352(11 - 1 downto 0);

    Co_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Co_ce0 <= ap_const_logic_1;
        else 
            Co_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    SupVec_address0 <= tmp_17_cast_fu_339_p1(15 - 1 downto 0);

    SupVec_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            SupVec_ce0 <= ap_const_logic_1;
        else 
            SupVec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_216_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_216_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_216_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_216_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    class_hw <= 
        ap_const_lv16_1 when (tmp_13_fu_298_p2(0) = '1') else 
        ap_const_lv16_FFFF;

    class_hw_ap_vld_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_216_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_216_p2 = ap_const_lv1_1))) then 
            class_hw_ap_vld <= ap_const_logic_1;
        else 
            class_hw_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_216_p2 <= "1" when (i_reg_136 = ap_const_lv11_4C6) else "0";
    exitcond_fu_313_p2 <= "1" when (j_reg_159 = ap_const_lv5_12) else "0";

    grp_fu_170_opcode_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_170_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_170_opcode <= ap_const_lv2_0;
        else 
            grp_fu_170_opcode <= "XX";
        end if; 
    end process;


    grp_fu_170_p0_assign_proc : process(x_load_reg_385, norm_reg_147, ap_CS_fsm_state5, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_170_p0 <= norm_reg_147;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_170_p0 <= x_load_reg_385;
        else 
            grp_fu_170_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_170_p1_assign_proc : process(SupVec_load_reg_390, tmp_8_reg_401, ap_CS_fsm_state5, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_170_p1 <= tmp_8_reg_401;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_170_p1 <= SupVec_load_reg_390;
        else 
            grp_fu_170_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_179_p0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state42, Co_load_reg_411, norm_reg_147)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_179_p0 <= Co_load_reg_411;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_179_p0 <= norm_reg_147;
        else 
            grp_fu_179_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_183_p0_assign_proc : process(reg_210, sum_reg_124, ap_CS_fsm_state49, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_183_p0 <= sum_reg_124;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_183_p0 <= reg_210;
        else 
            grp_fu_183_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_183_p1_assign_proc : process(tmp_7_reg_421, ap_CS_fsm_state49, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_183_p1 <= tmp_7_reg_421;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_183_p1 <= ap_const_lv64_C0068B43A0000000;
        else 
            grp_fu_183_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_189_p1_assign_proc : process(ap_CS_fsm_state19, tmp_5_reg_416, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_189_p1 <= tmp_5_reg_416;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_189_p1 <= ap_const_lv64_C020000000000000;
        else 
            grp_fu_189_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_222_p2 <= std_logic_vector(unsigned(i_reg_136) + unsigned(ap_const_lv11_1));
    j_1_fu_319_p2 <= std_logic_vector(unsigned(j_reg_159) + unsigned(ap_const_lv5_1));
    notlhs_fu_280_p2 <= "0" when (tmp_fu_266_p4 = ap_const_lv11_7FF) else "1";
    notrhs_fu_286_p2 <= "1" when (tmp_10_fu_276_p1 = ap_const_lv52_0) else "0";
    p_shl1_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_244_p3),16));
    p_shl_cast_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_232_p3),16));
    sum_to_int_fu_262_p1 <= sum_reg_124;
    tmp_10_fu_276_p1 <= sum_to_int_fu_262_p1(52 - 1 downto 0);
    tmp_11_fu_292_p2 <= (notrhs_fu_286_p2 or notlhs_fu_280_p2);
    tmp_13_fu_298_p2 <= (tmp_12_fu_194_p2 and tmp_11_fu_292_p2);
    tmp_14_fu_232_p3 <= (i_reg_136 & ap_const_lv4_0);
    tmp_15_fu_244_p3 <= (i_reg_136 & ap_const_lv1_0);
    tmp_16_fu_256_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_252_p1) + unsigned(p_shl_cast_fu_240_p1));
    tmp_17_cast_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_334_p2),64));
    tmp_17_fu_334_p2 <= std_logic_vector(unsigned(tmp_16_reg_357) + unsigned(tmp_cast_fu_330_p1));
    tmp_1_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_136),64));
    tmp_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_159),16));
    tmp_fu_266_p4 <= sum_to_int_fu_262_p1(62 downto 52);
    tmp_s_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_159),64));
    x_address0 <= tmp_s_fu_325_p1(5 - 1 downto 0);

    x_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
