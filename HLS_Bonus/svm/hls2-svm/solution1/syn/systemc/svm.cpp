// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "svm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic svm::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic svm::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<58> svm::ap_ST_fsm_state1 = "1";
const sc_lv<58> svm::ap_ST_fsm_state2 = "10";
const sc_lv<58> svm::ap_ST_fsm_state3 = "100";
const sc_lv<58> svm::ap_ST_fsm_state4 = "1000";
const sc_lv<58> svm::ap_ST_fsm_state5 = "10000";
const sc_lv<58> svm::ap_ST_fsm_state6 = "100000";
const sc_lv<58> svm::ap_ST_fsm_state7 = "1000000";
const sc_lv<58> svm::ap_ST_fsm_state8 = "10000000";
const sc_lv<58> svm::ap_ST_fsm_state9 = "100000000";
const sc_lv<58> svm::ap_ST_fsm_state10 = "1000000000";
const sc_lv<58> svm::ap_ST_fsm_state11 = "10000000000";
const sc_lv<58> svm::ap_ST_fsm_state12 = "100000000000";
const sc_lv<58> svm::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<58> svm::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<58> svm::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<58> svm::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<58> svm::ap_ST_fsm_state58 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> svm::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> svm::ap_const_lv32_2 = "10";
const sc_lv<1> svm::ap_const_lv1_1 = "1";
const sc_lv<32> svm::ap_const_lv32_29 = "101001";
const sc_lv<32> svm::ap_const_lv32_17 = "10111";
const sc_lv<32> svm::ap_const_lv32_2F = "101111";
const sc_lv<32> svm::ap_const_lv32_1 = "1";
const sc_lv<1> svm::ap_const_lv1_0 = "0";
const sc_lv<32> svm::ap_const_lv32_3 = "11";
const sc_lv<32> svm::ap_const_lv32_8 = "1000";
const sc_lv<32> svm::ap_const_lv32_C = "1100";
const sc_lv<32> svm::ap_const_lv32_11 = "10001";
const sc_lv<32> svm::ap_const_lv32_12 = "10010";
const sc_lv<32> svm::ap_const_lv32_34 = "110100";
const sc_lv<32> svm::ap_const_lv32_39 = "111001";
const sc_lv<64> svm::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<11> svm::ap_const_lv11_0 = "00000000000";
const sc_lv<5> svm::ap_const_lv5_0 = "00000";
const sc_lv<32> svm::ap_const_lv32_4 = "100";
const sc_lv<32> svm::ap_const_lv32_D = "1101";
const sc_lv<32> svm::ap_const_lv32_9 = "1001";
const sc_lv<64> svm::ap_const_lv64_C0068B43A0000000 = "1100000000000110100010110100001110100000000000000000000000000000";
const sc_lv<32> svm::ap_const_lv32_30 = "110000";
const sc_lv<32> svm::ap_const_lv32_35 = "110101";
const sc_lv<64> svm::ap_const_lv64_C020000000000000 = "1100000000100000000000000000000000000000000000000000000000000000";
const sc_lv<32> svm::ap_const_lv32_2A = "101010";
const sc_lv<32> svm::ap_const_lv32_18 = "11000";
const sc_lv<11> svm::ap_const_lv11_4C6 = "10011000110";
const sc_lv<11> svm::ap_const_lv11_1 = "1";
const sc_lv<4> svm::ap_const_lv4_0 = "0000";
const sc_lv<32> svm::ap_const_lv32_3E = "111110";
const sc_lv<11> svm::ap_const_lv11_7FF = "11111111111";
const sc_lv<52> svm::ap_const_lv52_0 = "0000000000000000000000000000000000000000000000000000";
const sc_lv<16> svm::ap_const_lv16_1 = "1";
const sc_lv<16> svm::ap_const_lv16_FFFF = "1111111111111111";
const sc_lv<5> svm::ap_const_lv5_12 = "10010";
const sc_lv<5> svm::ap_const_lv5_1 = "1";
const sc_lv<2> svm::ap_const_lv2_0 = "00";
const sc_lv<2> svm::ap_const_lv2_1 = "1";
const sc_lv<5> svm::ap_const_lv5_2 = "10";
const bool svm::ap_const_boolean_1 = true;

svm::svm(sc_module_name name) : sc_module(name), mVcdFile(0) {
    SupVec_U = new svm_SupVec("SupVec_U");
    SupVec_U->clk(ap_clk);
    SupVec_U->reset(ap_rst);
    SupVec_U->address0(SupVec_address0);
    SupVec_U->ce0(SupVec_ce0);
    SupVec_U->q0(SupVec_q0);
    Co_U = new svm_Co("Co_U");
    Co_U->clk(ap_clk);
    Co_U->reset(ap_rst);
    Co_U->address0(Co_address0);
    Co_U->ce0(Co_ce0);
    Co_U->q0(Co_q0);
    svm_faddfsub_32nsbkb_U1 = new svm_faddfsub_32nsbkb<1,5,32,32,32>("svm_faddfsub_32nsbkb_U1");
    svm_faddfsub_32nsbkb_U1->clk(ap_clk);
    svm_faddfsub_32nsbkb_U1->reset(ap_rst);
    svm_faddfsub_32nsbkb_U1->din0(grp_fu_170_p0);
    svm_faddfsub_32nsbkb_U1->din1(grp_fu_170_p1);
    svm_faddfsub_32nsbkb_U1->opcode(grp_fu_170_opcode);
    svm_faddfsub_32nsbkb_U1->ce(ap_var_for_const0);
    svm_faddfsub_32nsbkb_U1->dout(grp_fu_170_p2);
    svm_fmul_32ns_32ncud_U2 = new svm_fmul_32ns_32ncud<1,4,32,32,32>("svm_fmul_32ns_32ncud_U2");
    svm_fmul_32ns_32ncud_U2->clk(ap_clk);
    svm_fmul_32ns_32ncud_U2->reset(ap_rst);
    svm_fmul_32ns_32ncud_U2->din0(dif_reg_395);
    svm_fmul_32ns_32ncud_U2->din1(dif_reg_395);
    svm_fmul_32ns_32ncud_U2->ce(ap_var_for_const0);
    svm_fmul_32ns_32ncud_U2->dout(grp_fu_175_p2);
    svm_fpext_32ns_64dEe_U3 = new svm_fpext_32ns_64dEe<1,1,32,64>("svm_fpext_32ns_64dEe_U3");
    svm_fpext_32ns_64dEe_U3->din0(grp_fu_179_p0);
    svm_fpext_32ns_64dEe_U3->dout(grp_fu_179_p1);
    svm_dadd_64ns_64neOg_U4 = new svm_dadd_64ns_64neOg<1,5,64,64,64>("svm_dadd_64ns_64neOg_U4");
    svm_dadd_64ns_64neOg_U4->clk(ap_clk);
    svm_dadd_64ns_64neOg_U4->reset(ap_rst);
    svm_dadd_64ns_64neOg_U4->din0(grp_fu_183_p0);
    svm_dadd_64ns_64neOg_U4->din1(grp_fu_183_p1);
    svm_dadd_64ns_64neOg_U4->ce(ap_var_for_const0);
    svm_dadd_64ns_64neOg_U4->dout(grp_fu_183_p2);
    svm_dmul_64ns_64nfYi_U5 = new svm_dmul_64ns_64nfYi<1,6,64,64,64>("svm_dmul_64ns_64nfYi_U5");
    svm_dmul_64ns_64nfYi_U5->clk(ap_clk);
    svm_dmul_64ns_64nfYi_U5->reset(ap_rst);
    svm_dmul_64ns_64nfYi_U5->din0(reg_205);
    svm_dmul_64ns_64nfYi_U5->din1(grp_fu_189_p1);
    svm_dmul_64ns_64nfYi_U5->ce(ap_var_for_const0);
    svm_dmul_64ns_64nfYi_U5->dout(grp_fu_189_p2);
    svm_dcmp_64ns_64ng8j_U6 = new svm_dcmp_64ns_64ng8j<1,1,64,64,1>("svm_dcmp_64ns_64ng8j_U6");
    svm_dcmp_64ns_64ng8j_U6->din0(sum_reg_124);
    svm_dcmp_64ns_64ng8j_U6->din1(ap_var_for_const1);
    svm_dcmp_64ns_64ng8j_U6->opcode(ap_var_for_const2);
    svm_dcmp_64ns_64ng8j_U6->dout(tmp_12_fu_194_p2);
    svm_dexp_64ns_64nhbi_U7 = new svm_dexp_64ns_64nhbi<1,18,64,64,64>("svm_dexp_64ns_64nhbi_U7");
    svm_dexp_64ns_64nhbi_U7->clk(ap_clk);
    svm_dexp_64ns_64nhbi_U7->reset(ap_rst);
    svm_dexp_64ns_64nhbi_U7->din0(ap_var_for_const1);
    svm_dexp_64ns_64nhbi_U7->din1(reg_210);
    svm_dexp_64ns_64nhbi_U7->ce(ap_var_for_const0);
    svm_dexp_64ns_64nhbi_U7->dout(grp_fu_200_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Co_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_reg_352 );

    SC_METHOD(thread_Co_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_SupVec_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_17_cast_fu_339_p1 );

    SC_METHOD(thread_SupVec_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state48);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state53);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state54);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state58);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_216_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_216_p2 );

    SC_METHOD(thread_class_hw);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_216_p2 );
    sensitive << ( tmp_13_fu_298_p2 );

    SC_METHOD(thread_class_hw_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_216_p2 );

    SC_METHOD(thread_exitcond1_fu_216_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_136 );

    SC_METHOD(thread_exitcond_fu_313_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_reg_159 );

    SC_METHOD(thread_grp_fu_170_opcode);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_grp_fu_170_p0);
    sensitive << ( x_load_reg_385 );
    sensitive << ( norm_reg_147 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_grp_fu_170_p1);
    sensitive << ( SupVec_load_reg_390 );
    sensitive << ( tmp_8_reg_401 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_grp_fu_179_p0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( Co_load_reg_411 );
    sensitive << ( norm_reg_147 );

    SC_METHOD(thread_grp_fu_183_p0);
    sensitive << ( reg_210 );
    sensitive << ( sum_reg_124 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state54 );

    SC_METHOD(thread_grp_fu_183_p1);
    sensitive << ( tmp_7_reg_421 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state54 );

    SC_METHOD(thread_grp_fu_189_p1);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( tmp_5_reg_416 );
    sensitive << ( ap_CS_fsm_state43 );

    SC_METHOD(thread_i_1_fu_222_p2);
    sensitive << ( i_reg_136 );

    SC_METHOD(thread_j_1_fu_319_p2);
    sensitive << ( j_reg_159 );

    SC_METHOD(thread_notlhs_fu_280_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_216_p2 );
    sensitive << ( tmp_fu_266_p4 );

    SC_METHOD(thread_notrhs_fu_286_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_216_p2 );
    sensitive << ( tmp_10_fu_276_p1 );

    SC_METHOD(thread_p_shl1_cast_fu_252_p1);
    sensitive << ( tmp_15_fu_244_p3 );

    SC_METHOD(thread_p_shl_cast_fu_240_p1);
    sensitive << ( tmp_14_fu_232_p3 );

    SC_METHOD(thread_sum_to_int_fu_262_p1);
    sensitive << ( sum_reg_124 );

    SC_METHOD(thread_tmp_10_fu_276_p1);
    sensitive << ( sum_to_int_fu_262_p1 );

    SC_METHOD(thread_tmp_11_fu_292_p2);
    sensitive << ( notrhs_fu_286_p2 );
    sensitive << ( notlhs_fu_280_p2 );

    SC_METHOD(thread_tmp_13_fu_298_p2);
    sensitive << ( tmp_11_fu_292_p2 );
    sensitive << ( tmp_12_fu_194_p2 );

    SC_METHOD(thread_tmp_14_fu_232_p3);
    sensitive << ( i_reg_136 );

    SC_METHOD(thread_tmp_15_fu_244_p3);
    sensitive << ( i_reg_136 );

    SC_METHOD(thread_tmp_16_fu_256_p2);
    sensitive << ( p_shl1_cast_fu_252_p1 );
    sensitive << ( p_shl_cast_fu_240_p1 );

    SC_METHOD(thread_tmp_17_cast_fu_339_p1);
    sensitive << ( tmp_17_fu_334_p2 );

    SC_METHOD(thread_tmp_17_fu_334_p2);
    sensitive << ( tmp_16_reg_357 );
    sensitive << ( tmp_cast_fu_330_p1 );

    SC_METHOD(thread_tmp_1_fu_228_p1);
    sensitive << ( i_reg_136 );

    SC_METHOD(thread_tmp_cast_fu_330_p1);
    sensitive << ( j_reg_159 );

    SC_METHOD(thread_tmp_fu_266_p4);
    sensitive << ( sum_to_int_fu_262_p1 );

    SC_METHOD(thread_tmp_s_fu_325_p1);
    sensitive << ( j_reg_159 );

    SC_METHOD(thread_x_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_s_fu_325_p1 );

    SC_METHOD(thread_x_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_313_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_216_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "0000000000000000000000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "svm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, class_hw, "(port)class_hw");
    sc_trace(mVcdFile, class_hw_ap_vld, "(port)class_hw_ap_vld");
    sc_trace(mVcdFile, x_address0, "(port)x_address0");
    sc_trace(mVcdFile, x_ce0, "(port)x_ce0");
    sc_trace(mVcdFile, x_q0, "(port)x_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, SupVec_address0, "SupVec_address0");
    sc_trace(mVcdFile, SupVec_ce0, "SupVec_ce0");
    sc_trace(mVcdFile, SupVec_q0, "SupVec_q0");
    sc_trace(mVcdFile, Co_address0, "Co_address0");
    sc_trace(mVcdFile, Co_ce0, "Co_ce0");
    sc_trace(mVcdFile, Co_q0, "Co_q0");
    sc_trace(mVcdFile, grp_fu_179_p1, "grp_fu_179_p1");
    sc_trace(mVcdFile, reg_205, "reg_205");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond_fu_313_p2, "exitcond_fu_313_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, grp_fu_189_p2, "grp_fu_189_p2");
    sc_trace(mVcdFile, reg_210, "reg_210");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state48, "ap_CS_fsm_state48");
    sc_trace(mVcdFile, i_1_fu_222_p2, "i_1_fu_222_p2");
    sc_trace(mVcdFile, i_1_reg_347, "i_1_reg_347");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_1_fu_228_p1, "tmp_1_fu_228_p1");
    sc_trace(mVcdFile, tmp_1_reg_352, "tmp_1_reg_352");
    sc_trace(mVcdFile, exitcond1_fu_216_p2, "exitcond1_fu_216_p2");
    sc_trace(mVcdFile, tmp_16_fu_256_p2, "tmp_16_fu_256_p2");
    sc_trace(mVcdFile, tmp_16_reg_357, "tmp_16_reg_357");
    sc_trace(mVcdFile, j_1_fu_319_p2, "j_1_fu_319_p2");
    sc_trace(mVcdFile, j_1_reg_365, "j_1_reg_365");
    sc_trace(mVcdFile, x_load_reg_385, "x_load_reg_385");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, SupVec_load_reg_390, "SupVec_load_reg_390");
    sc_trace(mVcdFile, grp_fu_170_p2, "grp_fu_170_p2");
    sc_trace(mVcdFile, dif_reg_395, "dif_reg_395");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_fu_175_p2, "grp_fu_175_p2");
    sc_trace(mVcdFile, tmp_8_reg_401, "tmp_8_reg_401");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, Co_load_reg_411, "Co_load_reg_411");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, grp_fu_200_p2, "grp_fu_200_p2");
    sc_trace(mVcdFile, tmp_5_reg_416, "tmp_5_reg_416");
    sc_trace(mVcdFile, grp_fu_183_p2, "grp_fu_183_p2");
    sc_trace(mVcdFile, tmp_7_reg_421, "tmp_7_reg_421");
    sc_trace(mVcdFile, ap_CS_fsm_state53, "ap_CS_fsm_state53");
    sc_trace(mVcdFile, ap_CS_fsm_state58, "ap_CS_fsm_state58");
    sc_trace(mVcdFile, sum_reg_124, "sum_reg_124");
    sc_trace(mVcdFile, i_reg_136, "i_reg_136");
    sc_trace(mVcdFile, norm_reg_147, "norm_reg_147");
    sc_trace(mVcdFile, j_reg_159, "j_reg_159");
    sc_trace(mVcdFile, tmp_17_cast_fu_339_p1, "tmp_17_cast_fu_339_p1");
    sc_trace(mVcdFile, tmp_s_fu_325_p1, "tmp_s_fu_325_p1");
    sc_trace(mVcdFile, grp_fu_170_p0, "grp_fu_170_p0");
    sc_trace(mVcdFile, grp_fu_170_p1, "grp_fu_170_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, grp_fu_179_p0, "grp_fu_179_p0");
    sc_trace(mVcdFile, grp_fu_183_p0, "grp_fu_183_p0");
    sc_trace(mVcdFile, grp_fu_183_p1, "grp_fu_183_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state49, "ap_CS_fsm_state49");
    sc_trace(mVcdFile, ap_CS_fsm_state54, "ap_CS_fsm_state54");
    sc_trace(mVcdFile, grp_fu_189_p1, "grp_fu_189_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, tmp_14_fu_232_p3, "tmp_14_fu_232_p3");
    sc_trace(mVcdFile, tmp_15_fu_244_p3, "tmp_15_fu_244_p3");
    sc_trace(mVcdFile, p_shl1_cast_fu_252_p1, "p_shl1_cast_fu_252_p1");
    sc_trace(mVcdFile, p_shl_cast_fu_240_p1, "p_shl_cast_fu_240_p1");
    sc_trace(mVcdFile, sum_to_int_fu_262_p1, "sum_to_int_fu_262_p1");
    sc_trace(mVcdFile, tmp_fu_266_p4, "tmp_fu_266_p4");
    sc_trace(mVcdFile, tmp_10_fu_276_p1, "tmp_10_fu_276_p1");
    sc_trace(mVcdFile, notrhs_fu_286_p2, "notrhs_fu_286_p2");
    sc_trace(mVcdFile, notlhs_fu_280_p2, "notlhs_fu_280_p2");
    sc_trace(mVcdFile, tmp_11_fu_292_p2, "tmp_11_fu_292_p2");
    sc_trace(mVcdFile, tmp_12_fu_194_p2, "tmp_12_fu_194_p2");
    sc_trace(mVcdFile, tmp_13_fu_298_p2, "tmp_13_fu_298_p2");
    sc_trace(mVcdFile, tmp_cast_fu_330_p1, "tmp_cast_fu_330_p1");
    sc_trace(mVcdFile, tmp_17_fu_334_p2, "tmp_17_fu_334_p2");
    sc_trace(mVcdFile, grp_fu_170_opcode, "grp_fu_170_opcode");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("svm.hdltvin.dat");
    mHdltvoutHandle.open("svm.hdltvout.dat");
}

svm::~svm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete SupVec_U;
    delete Co_U;
    delete svm_faddfsub_32nsbkb_U1;
    delete svm_fmul_32ns_32ncud_U2;
    delete svm_fpext_32ns_64dEe_U3;
    delete svm_dadd_64ns_64neOg_U4;
    delete svm_dmul_64ns_64nfYi_U5;
    delete svm_dcmp_64ns_64ng8j_U6;
    delete svm_dexp_64ns_64nhbi_U7;
}

void svm::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void svm::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv64_0;
}

void svm::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv5_2;
}

void svm::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read())) {
        i_reg_136 = i_1_reg_347.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        i_reg_136 = ap_const_lv11_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        j_reg_159 = j_1_reg_365.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_216_p2.read(), ap_const_lv1_0))) {
        j_reg_159 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        norm_reg_147 = grp_fu_170_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_216_p2.read(), ap_const_lv1_0))) {
        norm_reg_147 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read())) {
        sum_reg_124 = grp_fu_183_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        sum_reg_124 = ap_const_lv64_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        Co_load_reg_411 = Co_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        SupVec_load_reg_390 = SupVec_q0.read();
        x_load_reg_385 = x_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        dif_reg_395 = grp_fu_170_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_347 = i_1_fu_222_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_1_reg_365 = j_1_fu_319_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
  esl_seteq<1,1,1>(exitcond_fu_313_p2.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        reg_205 = grp_fu_179_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()))) {
        reg_210 = grp_fu_189_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_216_p2.read(), ap_const_lv1_0))) {
        tmp_16_reg_357 = tmp_16_fu_256_p2.read();
        tmp_1_reg_352 = tmp_1_fu_228_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        tmp_5_reg_416 = grp_fu_200_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read())) {
        tmp_7_reg_421 = grp_fu_183_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        tmp_8_reg_401 = grp_fu_175_p2.read();
    }
}

void svm::thread_Co_address0() {
    Co_address0 =  (sc_lv<11>) (tmp_1_reg_352.read());
}

void svm::thread_Co_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        Co_ce0 = ap_const_logic_1;
    } else {
        Co_ce0 = ap_const_logic_0;
    }
}

void svm::thread_SupVec_address0() {
    SupVec_address0 =  (sc_lv<15>) (tmp_17_cast_fu_339_p1.read());
}

void svm::thread_SupVec_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        SupVec_ce0 = ap_const_logic_1;
    } else {
        SupVec_ce0 = ap_const_logic_0;
    }
}

void svm::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void svm::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void svm::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void svm::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void svm::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void svm::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void svm::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void svm::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void svm::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void svm::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void svm::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void svm::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void svm::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[42];
}

void svm::thread_ap_CS_fsm_state48() {
    ap_CS_fsm_state48 = ap_CS_fsm.read()[47];
}

void svm::thread_ap_CS_fsm_state49() {
    ap_CS_fsm_state49 = ap_CS_fsm.read()[48];
}

void svm::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void svm::thread_ap_CS_fsm_state53() {
    ap_CS_fsm_state53 = ap_CS_fsm.read()[52];
}

void svm::thread_ap_CS_fsm_state54() {
    ap_CS_fsm_state54 = ap_CS_fsm.read()[53];
}

void svm::thread_ap_CS_fsm_state58() {
    ap_CS_fsm_state58 = ap_CS_fsm.read()[57];
}

void svm::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void svm::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_216_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void svm::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void svm::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_216_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void svm::thread_class_hw() {
    class_hw = (!tmp_13_fu_298_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_13_fu_298_p2.read()[0].to_bool())? ap_const_lv16_1: ap_const_lv16_FFFF);
}

void svm::thread_class_hw_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_216_p2.read(), ap_const_lv1_1))) {
        class_hw_ap_vld = ap_const_logic_1;
    } else {
        class_hw_ap_vld = ap_const_logic_0;
    }
}

void svm::thread_exitcond1_fu_216_p2() {
    exitcond1_fu_216_p2 = (!i_reg_136.read().is_01() || !ap_const_lv11_4C6.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_136.read() == ap_const_lv11_4C6);
}

void svm::thread_exitcond_fu_313_p2() {
    exitcond_fu_313_p2 = (!j_reg_159.read().is_01() || !ap_const_lv5_12.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_159.read() == ap_const_lv5_12);
}

void svm::thread_grp_fu_170_opcode() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        grp_fu_170_opcode = ap_const_lv2_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        grp_fu_170_opcode = ap_const_lv2_0;
    } else {
        grp_fu_170_opcode = "XX";
    }
}

void svm::thread_grp_fu_170_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        grp_fu_170_p0 = norm_reg_147.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        grp_fu_170_p0 = x_load_reg_385.read();
    } else {
        grp_fu_170_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void svm::thread_grp_fu_170_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        grp_fu_170_p1 = tmp_8_reg_401.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        grp_fu_170_p1 = SupVec_load_reg_390.read();
    } else {
        grp_fu_170_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void svm::thread_grp_fu_179_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        grp_fu_179_p0 = Co_load_reg_411.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_fu_179_p0 = norm_reg_147.read();
    } else {
        grp_fu_179_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void svm::thread_grp_fu_183_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read())) {
        grp_fu_183_p0 = sum_reg_124.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        grp_fu_183_p0 = reg_210.read();
    } else {
        grp_fu_183_p0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void svm::thread_grp_fu_183_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read())) {
        grp_fu_183_p1 = tmp_7_reg_421.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        grp_fu_183_p1 = ap_const_lv64_C0068B43A0000000;
    } else {
        grp_fu_183_p1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void svm::thread_grp_fu_189_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        grp_fu_189_p1 = tmp_5_reg_416.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        grp_fu_189_p1 = ap_const_lv64_C020000000000000;
    } else {
        grp_fu_189_p1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void svm::thread_i_1_fu_222_p2() {
    i_1_fu_222_p2 = (!i_reg_136.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i_reg_136.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void svm::thread_j_1_fu_319_p2() {
    j_1_fu_319_p2 = (!j_reg_159.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(j_reg_159.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void svm::thread_notlhs_fu_280_p2() {
    notlhs_fu_280_p2 = (!tmp_fu_266_p4.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_266_p4.read() != ap_const_lv11_7FF);
}

void svm::thread_notrhs_fu_286_p2() {
    notrhs_fu_286_p2 = (!tmp_10_fu_276_p1.read().is_01() || !ap_const_lv52_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_10_fu_276_p1.read() == ap_const_lv52_0);
}

void svm::thread_p_shl1_cast_fu_252_p1() {
    p_shl1_cast_fu_252_p1 = esl_zext<16,12>(tmp_15_fu_244_p3.read());
}

void svm::thread_p_shl_cast_fu_240_p1() {
    p_shl_cast_fu_240_p1 = esl_zext<16,15>(tmp_14_fu_232_p3.read());
}

void svm::thread_sum_to_int_fu_262_p1() {
    sum_to_int_fu_262_p1 = sum_reg_124.read();
}

void svm::thread_tmp_10_fu_276_p1() {
    tmp_10_fu_276_p1 = sum_to_int_fu_262_p1.read().range(52-1, 0);
}

void svm::thread_tmp_11_fu_292_p2() {
    tmp_11_fu_292_p2 = (notrhs_fu_286_p2.read() | notlhs_fu_280_p2.read());
}

void svm::thread_tmp_13_fu_298_p2() {
    tmp_13_fu_298_p2 = (tmp_11_fu_292_p2.read() & tmp_12_fu_194_p2.read());
}

void svm::thread_tmp_14_fu_232_p3() {
    tmp_14_fu_232_p3 = esl_concat<11,4>(i_reg_136.read(), ap_const_lv4_0);
}

void svm::thread_tmp_15_fu_244_p3() {
    tmp_15_fu_244_p3 = esl_concat<11,1>(i_reg_136.read(), ap_const_lv1_0);
}

void svm::thread_tmp_16_fu_256_p2() {
    tmp_16_fu_256_p2 = (!p_shl1_cast_fu_252_p1.read().is_01() || !p_shl_cast_fu_240_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(p_shl1_cast_fu_252_p1.read()) + sc_biguint<16>(p_shl_cast_fu_240_p1.read()));
}

void svm::thread_tmp_17_cast_fu_339_p1() {
    tmp_17_cast_fu_339_p1 = esl_zext<64,16>(tmp_17_fu_334_p2.read());
}

void svm::thread_tmp_17_fu_334_p2() {
    tmp_17_fu_334_p2 = (!tmp_16_reg_357.read().is_01() || !tmp_cast_fu_330_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp_16_reg_357.read()) + sc_biguint<16>(tmp_cast_fu_330_p1.read()));
}

void svm::thread_tmp_1_fu_228_p1() {
    tmp_1_fu_228_p1 = esl_zext<64,11>(i_reg_136.read());
}

void svm::thread_tmp_cast_fu_330_p1() {
    tmp_cast_fu_330_p1 = esl_zext<16,5>(j_reg_159.read());
}

void svm::thread_tmp_fu_266_p4() {
    tmp_fu_266_p4 = sum_to_int_fu_262_p1.read().range(62, 52);
}

void svm::thread_tmp_s_fu_325_p1() {
    tmp_s_fu_325_p1 = esl_zext<64,5>(j_reg_159.read());
}

void svm::thread_x_address0() {
    x_address0 =  (sc_lv<5>) (tmp_s_fu_325_p1.read());
}

void svm::thread_x_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x_ce0 = ap_const_logic_1;
    } else {
        x_ce0 = ap_const_logic_0;
    }
}

void svm::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_216_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_313_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_fsm_state48;
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_fsm_state50;
            break;
        case 562949953421312 : 
            ap_NS_fsm = ap_ST_fsm_state51;
            break;
        case 1125899906842624 : 
            ap_NS_fsm = ap_ST_fsm_state52;
            break;
        case 2251799813685248 : 
            ap_NS_fsm = ap_ST_fsm_state53;
            break;
        case 4503599627370496 : 
            ap_NS_fsm = ap_ST_fsm_state54;
            break;
        case 9007199254740992 : 
            ap_NS_fsm = ap_ST_fsm_state55;
            break;
        case 18014398509481984 : 
            ap_NS_fsm = ap_ST_fsm_state56;
            break;
        case 36028797018963968 : 
            ap_NS_fsm = ap_ST_fsm_state57;
            break;
        case 72057594037927936 : 
            ap_NS_fsm = ap_ST_fsm_state58;
            break;
        case 144115188075855872 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<58>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void svm::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"class_hw\" :  \"" << class_hw.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"class_hw_ap_vld\" :  \"" << class_hw_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_address0\" :  \"" << x_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_ce0\" :  \"" << x_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_q0\" :  \"" << x_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

