// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="svm,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.378800,HLS_SYN_LAT=188189,HLS_SYN_TPT=none,HLS_SYN_MEM=68,HLS_SYN_DSP=45,HLS_SYN_FF=3589,HLS_SYN_LUT=6802,HLS_VERSION=2018_2}" *)

module svm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        class_hw,
        class_hw_ap_vld,
        x_address0,
        x_ce0,
        x_q0
);

parameter    ap_ST_fsm_state1 = 98'd1;
parameter    ap_ST_fsm_state2 = 98'd2;
parameter    ap_ST_fsm_state3 = 98'd4;
parameter    ap_ST_fsm_state4 = 98'd8;
parameter    ap_ST_fsm_state5 = 98'd16;
parameter    ap_ST_fsm_state6 = 98'd32;
parameter    ap_ST_fsm_state7 = 98'd64;
parameter    ap_ST_fsm_state8 = 98'd128;
parameter    ap_ST_fsm_state9 = 98'd256;
parameter    ap_ST_fsm_state10 = 98'd512;
parameter    ap_ST_fsm_state11 = 98'd1024;
parameter    ap_ST_fsm_state12 = 98'd2048;
parameter    ap_ST_fsm_state13 = 98'd4096;
parameter    ap_ST_fsm_state14 = 98'd8192;
parameter    ap_ST_fsm_state15 = 98'd16384;
parameter    ap_ST_fsm_state16 = 98'd32768;
parameter    ap_ST_fsm_state17 = 98'd65536;
parameter    ap_ST_fsm_state18 = 98'd131072;
parameter    ap_ST_fsm_state19 = 98'd262144;
parameter    ap_ST_fsm_state20 = 98'd524288;
parameter    ap_ST_fsm_state21 = 98'd1048576;
parameter    ap_ST_fsm_state22 = 98'd2097152;
parameter    ap_ST_fsm_state23 = 98'd4194304;
parameter    ap_ST_fsm_state24 = 98'd8388608;
parameter    ap_ST_fsm_state25 = 98'd16777216;
parameter    ap_ST_fsm_state26 = 98'd33554432;
parameter    ap_ST_fsm_state27 = 98'd67108864;
parameter    ap_ST_fsm_state28 = 98'd134217728;
parameter    ap_ST_fsm_state29 = 98'd268435456;
parameter    ap_ST_fsm_state30 = 98'd536870912;
parameter    ap_ST_fsm_state31 = 98'd1073741824;
parameter    ap_ST_fsm_state32 = 98'd2147483648;
parameter    ap_ST_fsm_state33 = 98'd4294967296;
parameter    ap_ST_fsm_state34 = 98'd8589934592;
parameter    ap_ST_fsm_state35 = 98'd17179869184;
parameter    ap_ST_fsm_state36 = 98'd34359738368;
parameter    ap_ST_fsm_state37 = 98'd68719476736;
parameter    ap_ST_fsm_state38 = 98'd137438953472;
parameter    ap_ST_fsm_state39 = 98'd274877906944;
parameter    ap_ST_fsm_state40 = 98'd549755813888;
parameter    ap_ST_fsm_state41 = 98'd1099511627776;
parameter    ap_ST_fsm_state42 = 98'd2199023255552;
parameter    ap_ST_fsm_state43 = 98'd4398046511104;
parameter    ap_ST_fsm_state44 = 98'd8796093022208;
parameter    ap_ST_fsm_state45 = 98'd17592186044416;
parameter    ap_ST_fsm_state46 = 98'd35184372088832;
parameter    ap_ST_fsm_state47 = 98'd70368744177664;
parameter    ap_ST_fsm_state48 = 98'd140737488355328;
parameter    ap_ST_fsm_state49 = 98'd281474976710656;
parameter    ap_ST_fsm_state50 = 98'd562949953421312;
parameter    ap_ST_fsm_state51 = 98'd1125899906842624;
parameter    ap_ST_fsm_state52 = 98'd2251799813685248;
parameter    ap_ST_fsm_state53 = 98'd4503599627370496;
parameter    ap_ST_fsm_state54 = 98'd9007199254740992;
parameter    ap_ST_fsm_state55 = 98'd18014398509481984;
parameter    ap_ST_fsm_state56 = 98'd36028797018963968;
parameter    ap_ST_fsm_state57 = 98'd72057594037927936;
parameter    ap_ST_fsm_state58 = 98'd144115188075855872;
parameter    ap_ST_fsm_state59 = 98'd288230376151711744;
parameter    ap_ST_fsm_state60 = 98'd576460752303423488;
parameter    ap_ST_fsm_state61 = 98'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 98'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 98'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 98'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 98'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 98'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 98'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 98'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 98'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 98'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 98'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 98'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 98'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 98'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 98'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 98'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 98'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 98'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 98'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 98'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 98'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 98'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 98'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 98'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 98'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 98'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 98'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 98'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 98'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 98'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 98'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 98'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 98'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 98'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 98'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 98'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 98'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 98'd158456325028528675187087900672;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] class_hw;
output   class_hw_ap_vld;
output  [4:0] x_address0;
output   x_ce0;
input  [31:0] x_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg class_hw_ap_vld;
reg[4:0] x_address0;
reg x_ce0;

(* fsm_encoding = "none" *) reg   [97:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [14:0] SupVec_address0;
reg    SupVec_ce0;
wire   [31:0] SupVec_q0;
wire   [10:0] Co_address0;
reg    Co_ce0;
wire   [31:0] Co_q0;
wire   [63:0] grp_fu_324_p1;
reg   [63:0] reg_350;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_486_p2;
wire    ap_CS_fsm_state82;
reg   [31:0] reg_355;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state44;
reg   [31:0] reg_360;
wire   [31:0] grp_fu_315_p2;
reg   [31:0] reg_365;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state53;
wire   [31:0] grp_fu_320_p2;
reg   [31:0] reg_372;
wire    ap_CS_fsm_state13;
reg   [31:0] reg_377;
wire    ap_CS_fsm_state49;
wire   [63:0] grp_fu_334_p2;
reg   [63:0] reg_383;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state88;
wire   [10:0] i_1_fu_395_p2;
reg   [10:0] i_1_reg_720;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_1_fu_401_p1;
reg   [63:0] tmp_1_reg_725;
wire   [0:0] exitcond1_fu_389_p2;
wire   [15:0] tmp_16_fu_429_p2;
reg   [15:0] tmp_16_reg_730;
wire    ap_CS_fsm_state8;
wire   [4:0] j_1_8_fu_711_p2;
reg   [4:0] j_1_8_reg_841;
wire    ap_CS_fsm_state58;
reg   [31:0] Co_load_reg_851;
wire    ap_CS_fsm_state59;
wire   [63:0] grp_fu_345_p2;
reg   [63:0] tmp_5_13_reg_856;
wire   [63:0] grp_fu_328_p2;
reg   [63:0] tmp_7_15_reg_861;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state98;
reg   [63:0] sum_reg_268;
reg   [10:0] i_reg_280;
reg   [31:0] norm_reg_291;
reg   [4:0] j_reg_303;
wire   [63:0] tmp_17_cast_fu_506_p1;
wire   [63:0] tmp_s_fu_492_p1;
wire   [63:0] tmp_18_cast_fu_531_p1;
wire   [63:0] tmp_1_5_fu_517_p1;
wire   [63:0] tmp_19_cast_fu_556_p1;
wire   [63:0] tmp_2_fu_542_p1;
wire   [63:0] tmp_20_cast_fu_581_p1;
wire   [63:0] tmp_3_fu_567_p1;
wire   [63:0] tmp_21_cast_fu_606_p1;
wire   [63:0] tmp_4_fu_592_p1;
wire   [63:0] tmp_22_cast_fu_631_p1;
wire   [63:0] tmp_5_fu_617_p1;
wire   [63:0] tmp_23_cast_fu_656_p1;
wire   [63:0] tmp_6_fu_642_p1;
wire   [63:0] tmp_24_cast_fu_681_p1;
wire   [63:0] tmp_7_fu_667_p1;
wire   [63:0] tmp_25_cast_fu_706_p1;
wire   [63:0] tmp_8_8_fu_692_p1;
reg   [31:0] grp_fu_315_p0;
reg   [31:0] grp_fu_315_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state54;
reg   [31:0] grp_fu_320_p0;
reg   [31:0] grp_fu_320_p1;
wire    ap_CS_fsm_state50;
reg   [31:0] grp_fu_324_p0;
reg   [63:0] grp_fu_328_p0;
reg   [63:0] grp_fu_328_p1;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state94;
reg   [63:0] grp_fu_334_p1;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state65;
wire   [14:0] tmp_14_fu_405_p3;
wire   [11:0] tmp_15_fu_417_p3;
wire   [15:0] p_shl1_cast_fu_425_p1;
wire   [15:0] p_shl_cast_fu_413_p1;
wire   [63:0] sum_to_int_fu_435_p1;
wire   [10:0] tmp_fu_439_p4;
wire   [51:0] tmp_10_fu_449_p1;
wire   [0:0] notrhs_fu_459_p2;
wire   [0:0] notlhs_fu_453_p2;
wire   [0:0] tmp_11_fu_465_p2;
wire   [0:0] tmp_12_fu_339_p2;
wire   [0:0] tmp_13_fu_471_p2;
wire   [15:0] tmp_cast_fu_497_p1;
wire   [15:0] tmp_17_fu_501_p2;
wire   [4:0] j_1_fu_511_p2;
wire   [15:0] tmp_1_cast_fu_522_p1;
wire   [15:0] tmp_18_fu_526_p2;
wire   [4:0] j_1_1_fu_536_p2;
wire   [15:0] tmp_2_cast_fu_547_p1;
wire   [15:0] tmp_19_fu_551_p2;
wire   [4:0] j_1_2_fu_561_p2;
wire   [15:0] tmp_3_cast_fu_572_p1;
wire   [15:0] tmp_20_fu_576_p2;
wire   [4:0] j_1_3_fu_586_p2;
wire   [15:0] tmp_4_cast_fu_597_p1;
wire   [15:0] tmp_21_fu_601_p2;
wire   [4:0] j_1_4_fu_611_p2;
wire   [15:0] tmp_5_cast_fu_622_p1;
wire   [15:0] tmp_22_fu_626_p2;
wire   [4:0] j_1_5_fu_636_p2;
wire   [15:0] tmp_6_cast_fu_647_p1;
wire   [15:0] tmp_23_fu_651_p2;
wire   [4:0] j_1_6_fu_661_p2;
wire   [15:0] tmp_7_cast_fu_672_p1;
wire   [15:0] tmp_24_fu_676_p2;
wire   [4:0] j_1_7_fu_686_p2;
wire   [15:0] tmp_8_cast_fu_697_p1;
wire   [15:0] tmp_25_fu_701_p2;
reg   [1:0] grp_fu_315_opcode;
reg   [97:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 98'd1;
end

svm_SupVec #(
    .DataWidth( 32 ),
    .AddressRange( 21996 ),
    .AddressWidth( 15 ))
SupVec_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SupVec_address0),
    .ce0(SupVec_ce0),
    .q0(SupVec_q0)
);

svm_Co #(
    .DataWidth( 32 ),
    .AddressRange( 1222 ),
    .AddressWidth( 11 ))
Co_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Co_address0),
    .ce0(Co_ce0),
    .q0(Co_q0)
);

svm_faddfsub_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
svm_faddfsub_32nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_315_p0),
    .din1(grp_fu_315_p1),
    .opcode(grp_fu_315_opcode),
    .ce(1'b1),
    .dout(grp_fu_315_p2)
);

svm_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
svm_fmul_32ns_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_320_p0),
    .din1(grp_fu_320_p1),
    .ce(1'b1),
    .dout(grp_fu_320_p2)
);

svm_fpext_32ns_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
svm_fpext_32ns_64dEe_U3(
    .din0(grp_fu_324_p0),
    .dout(grp_fu_324_p1)
);

svm_dadd_64ns_64neOg #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
svm_dadd_64ns_64neOg_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_328_p0),
    .din1(grp_fu_328_p1),
    .ce(1'b1),
    .dout(grp_fu_328_p2)
);

svm_dmul_64ns_64nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
svm_dmul_64ns_64nfYi_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_350),
    .din1(grp_fu_334_p1),
    .ce(1'b1),
    .dout(grp_fu_334_p2)
);

svm_dcmp_64ns_64ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
svm_dcmp_64ns_64ng8j_U6(
    .din0(sum_reg_268),
    .din1(64'd0),
    .opcode(5'd2),
    .dout(tmp_12_fu_339_p2)
);

svm_dexp_64ns_64nhbi #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
svm_dexp_64ns_64nhbi_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(reg_383),
    .ce(1'b1),
    .dout(grp_fu_345_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        i_reg_280 <= i_1_reg_720;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_280 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        j_reg_303 <= j_1_8_reg_841;
    end else if (((exitcond1_fu_389_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_303 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        norm_reg_291 <= grp_fu_315_p2;
    end else if (((exitcond1_fu_389_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        norm_reg_291 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        sum_reg_268 <= grp_fu_328_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_reg_268 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        Co_load_reg_851 <= Co_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_720 <= i_1_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        j_1_8_reg_841 <= j_1_8_fu_711_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state82) | ((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_486_p2 == 1'd1)))) begin
        reg_350 <= grp_fu_324_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_355 <= x_q0;
        reg_360 <= SupVec_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_365 <= grp_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_372 <= grp_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_377 <= grp_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state64))) begin
        reg_383 <= grp_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_389_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_16_reg_730[15 : 1] <= tmp_16_fu_429_p2[15 : 1];
        tmp_1_reg_725[10 : 0] <= tmp_1_fu_401_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        tmp_5_13_reg_856 <= grp_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        tmp_7_15_reg_861 <= grp_fu_328_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Co_ce0 = 1'b1;
    end else begin
        Co_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        SupVec_address0 = tmp_25_cast_fu_706_p1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        SupVec_address0 = tmp_24_cast_fu_681_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        SupVec_address0 = tmp_23_cast_fu_656_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        SupVec_address0 = tmp_22_cast_fu_631_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        SupVec_address0 = tmp_21_cast_fu_606_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        SupVec_address0 = tmp_20_cast_fu_581_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        SupVec_address0 = tmp_19_cast_fu_556_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        SupVec_address0 = tmp_18_cast_fu_531_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        SupVec_address0 = tmp_17_cast_fu_506_p1;
    end else begin
        SupVec_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state3))) begin
        SupVec_ce0 = 1'b1;
    end else begin
        SupVec_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_389_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_389_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_389_p2 == 1'd1))) begin
        class_hw_ap_vld = 1'b1;
    end else begin
        class_hw_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_315_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_fu_315_opcode = 2'd0;
    end else begin
        grp_fu_315_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_315_p0 = reg_365;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_315_p0 = norm_reg_291;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_315_p0 = reg_355;
    end else begin
        grp_fu_315_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_fu_315_p1 = reg_372;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_315_p1 = reg_360;
    end else begin
        grp_fu_315_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20))) begin
        grp_fu_320_p0 = reg_377;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_320_p0 = reg_365;
    end else begin
        grp_fu_320_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20))) begin
        grp_fu_320_p1 = reg_377;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_320_p1 = reg_365;
    end else begin
        grp_fu_320_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_324_p0 = Co_load_reg_851;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_324_p0 = norm_reg_291;
    end else begin
        grp_fu_324_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        grp_fu_328_p0 = sum_reg_268;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        grp_fu_328_p0 = reg_383;
    end else begin
        grp_fu_328_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        grp_fu_328_p1 = tmp_7_15_reg_861;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        grp_fu_328_p1 = 64'd13836900027705851904;
    end else begin
        grp_fu_328_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        grp_fu_334_p1 = tmp_5_13_reg_856;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_334_p1 = 64'd13844065254536904704;
    end else begin
        grp_fu_334_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        x_address0 = tmp_8_8_fu_692_p1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        x_address0 = tmp_7_fu_667_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        x_address0 = tmp_6_fu_642_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        x_address0 = tmp_5_fu_617_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        x_address0 = tmp_4_fu_592_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        x_address0 = tmp_3_fu_567_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        x_address0 = tmp_2_fu_542_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        x_address0 = tmp_1_5_fu_517_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_address0 = tmp_s_fu_492_p1;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state3))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_389_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_486_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Co_address0 = tmp_1_reg_725;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign class_hw = ((tmp_13_fu_471_p2[0:0] === 1'b1) ? 16'd1 : 16'd65535);

assign exitcond1_fu_389_p2 = ((i_reg_280 == 11'd1222) ? 1'b1 : 1'b0);

assign exitcond_fu_486_p2 = ((j_reg_303 == 5'd18) ? 1'b1 : 1'b0);

assign i_1_fu_395_p2 = (i_reg_280 + 11'd1);

assign j_1_1_fu_536_p2 = (j_reg_303 + 5'd2);

assign j_1_2_fu_561_p2 = (j_reg_303 + 5'd3);

assign j_1_3_fu_586_p2 = (j_reg_303 + 5'd4);

assign j_1_4_fu_611_p2 = (j_reg_303 + 5'd5);

assign j_1_5_fu_636_p2 = (j_reg_303 + 5'd6);

assign j_1_6_fu_661_p2 = (j_reg_303 + 5'd7);

assign j_1_7_fu_686_p2 = (j_reg_303 + 5'd8);

assign j_1_8_fu_711_p2 = (j_reg_303 + 5'd9);

assign j_1_fu_511_p2 = (j_reg_303 + 5'd1);

assign notlhs_fu_453_p2 = ((tmp_fu_439_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notrhs_fu_459_p2 = ((tmp_10_fu_449_p1 == 52'd0) ? 1'b1 : 1'b0);

assign p_shl1_cast_fu_425_p1 = tmp_15_fu_417_p3;

assign p_shl_cast_fu_413_p1 = tmp_14_fu_405_p3;

assign sum_to_int_fu_435_p1 = sum_reg_268;

assign tmp_10_fu_449_p1 = sum_to_int_fu_435_p1[51:0];

assign tmp_11_fu_465_p2 = (notrhs_fu_459_p2 | notlhs_fu_453_p2);

assign tmp_13_fu_471_p2 = (tmp_12_fu_339_p2 & tmp_11_fu_465_p2);

assign tmp_14_fu_405_p3 = {{i_reg_280}, {4'd0}};

assign tmp_15_fu_417_p3 = {{i_reg_280}, {1'd0}};

assign tmp_16_fu_429_p2 = (p_shl1_cast_fu_425_p1 + p_shl_cast_fu_413_p1);

assign tmp_17_cast_fu_506_p1 = tmp_17_fu_501_p2;

assign tmp_17_fu_501_p2 = (tmp_16_reg_730 + tmp_cast_fu_497_p1);

assign tmp_18_cast_fu_531_p1 = tmp_18_fu_526_p2;

assign tmp_18_fu_526_p2 = (tmp_16_reg_730 + tmp_1_cast_fu_522_p1);

assign tmp_19_cast_fu_556_p1 = tmp_19_fu_551_p2;

assign tmp_19_fu_551_p2 = (tmp_16_reg_730 + tmp_2_cast_fu_547_p1);

assign tmp_1_5_fu_517_p1 = j_1_fu_511_p2;

assign tmp_1_cast_fu_522_p1 = j_1_fu_511_p2;

assign tmp_1_fu_401_p1 = i_reg_280;

assign tmp_20_cast_fu_581_p1 = tmp_20_fu_576_p2;

assign tmp_20_fu_576_p2 = (tmp_16_reg_730 + tmp_3_cast_fu_572_p1);

assign tmp_21_cast_fu_606_p1 = tmp_21_fu_601_p2;

assign tmp_21_fu_601_p2 = (tmp_16_reg_730 + tmp_4_cast_fu_597_p1);

assign tmp_22_cast_fu_631_p1 = tmp_22_fu_626_p2;

assign tmp_22_fu_626_p2 = (tmp_16_reg_730 + tmp_5_cast_fu_622_p1);

assign tmp_23_cast_fu_656_p1 = tmp_23_fu_651_p2;

assign tmp_23_fu_651_p2 = (tmp_16_reg_730 + tmp_6_cast_fu_647_p1);

assign tmp_24_cast_fu_681_p1 = tmp_24_fu_676_p2;

assign tmp_24_fu_676_p2 = (tmp_16_reg_730 + tmp_7_cast_fu_672_p1);

assign tmp_25_cast_fu_706_p1 = tmp_25_fu_701_p2;

assign tmp_25_fu_701_p2 = (tmp_16_reg_730 + tmp_8_cast_fu_697_p1);

assign tmp_2_cast_fu_547_p1 = j_1_1_fu_536_p2;

assign tmp_2_fu_542_p1 = j_1_1_fu_536_p2;

assign tmp_3_cast_fu_572_p1 = j_1_2_fu_561_p2;

assign tmp_3_fu_567_p1 = j_1_2_fu_561_p2;

assign tmp_4_cast_fu_597_p1 = j_1_3_fu_586_p2;

assign tmp_4_fu_592_p1 = j_1_3_fu_586_p2;

assign tmp_5_cast_fu_622_p1 = j_1_4_fu_611_p2;

assign tmp_5_fu_617_p1 = j_1_4_fu_611_p2;

assign tmp_6_cast_fu_647_p1 = j_1_5_fu_636_p2;

assign tmp_6_fu_642_p1 = j_1_5_fu_636_p2;

assign tmp_7_cast_fu_672_p1 = j_1_6_fu_661_p2;

assign tmp_7_fu_667_p1 = j_1_6_fu_661_p2;

assign tmp_8_8_fu_692_p1 = j_1_7_fu_686_p2;

assign tmp_8_cast_fu_697_p1 = j_1_7_fu_686_p2;

assign tmp_cast_fu_497_p1 = j_reg_303;

assign tmp_fu_439_p4 = {{sum_to_int_fu_435_p1[62:52]}};

assign tmp_s_fu_492_p1 = j_reg_303;

always @ (posedge ap_clk) begin
    tmp_1_reg_725[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_16_reg_730[0] <= 1'b0;
end

endmodule //svm
