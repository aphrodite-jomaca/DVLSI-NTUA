// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="svm,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.427200,HLS_SYN_LAT=175969,HLS_SYN_TPT=none,HLS_SYN_MEM=76,HLS_SYN_DSP=54,HLS_SYN_FF=4989,HLS_SYN_LUT=8087,HLS_VERSION=2018_2}" *)

module svm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        class_hw,
        class_hw_ap_vld,
        x_0_address0,
        x_0_ce0,
        x_0_q0,
        x_1_address0,
        x_1_ce0,
        x_1_q0,
        x_2_address0,
        x_2_ce0,
        x_2_q0,
        x_3_address0,
        x_3_ce0,
        x_3_q0,
        x_4_address0,
        x_4_ce0,
        x_4_q0,
        x_5_address0,
        x_5_ce0,
        x_5_q0,
        x_6_address0,
        x_6_ce0,
        x_6_q0,
        x_7_address0,
        x_7_ce0,
        x_7_q0,
        x_8_address0,
        x_8_ce0,
        x_8_q0
);

parameter    ap_ST_fsm_state1 = 93'd1;
parameter    ap_ST_fsm_state2 = 93'd2;
parameter    ap_ST_fsm_state3 = 93'd4;
parameter    ap_ST_fsm_state4 = 93'd8;
parameter    ap_ST_fsm_state5 = 93'd16;
parameter    ap_ST_fsm_state6 = 93'd32;
parameter    ap_ST_fsm_state7 = 93'd64;
parameter    ap_ST_fsm_state8 = 93'd128;
parameter    ap_ST_fsm_state9 = 93'd256;
parameter    ap_ST_fsm_state10 = 93'd512;
parameter    ap_ST_fsm_state11 = 93'd1024;
parameter    ap_ST_fsm_state12 = 93'd2048;
parameter    ap_ST_fsm_state13 = 93'd4096;
parameter    ap_ST_fsm_state14 = 93'd8192;
parameter    ap_ST_fsm_state15 = 93'd16384;
parameter    ap_ST_fsm_state16 = 93'd32768;
parameter    ap_ST_fsm_state17 = 93'd65536;
parameter    ap_ST_fsm_state18 = 93'd131072;
parameter    ap_ST_fsm_state19 = 93'd262144;
parameter    ap_ST_fsm_state20 = 93'd524288;
parameter    ap_ST_fsm_state21 = 93'd1048576;
parameter    ap_ST_fsm_state22 = 93'd2097152;
parameter    ap_ST_fsm_state23 = 93'd4194304;
parameter    ap_ST_fsm_state24 = 93'd8388608;
parameter    ap_ST_fsm_state25 = 93'd16777216;
parameter    ap_ST_fsm_state26 = 93'd33554432;
parameter    ap_ST_fsm_state27 = 93'd67108864;
parameter    ap_ST_fsm_state28 = 93'd134217728;
parameter    ap_ST_fsm_state29 = 93'd268435456;
parameter    ap_ST_fsm_state30 = 93'd536870912;
parameter    ap_ST_fsm_state31 = 93'd1073741824;
parameter    ap_ST_fsm_state32 = 93'd2147483648;
parameter    ap_ST_fsm_state33 = 93'd4294967296;
parameter    ap_ST_fsm_state34 = 93'd8589934592;
parameter    ap_ST_fsm_state35 = 93'd17179869184;
parameter    ap_ST_fsm_state36 = 93'd34359738368;
parameter    ap_ST_fsm_state37 = 93'd68719476736;
parameter    ap_ST_fsm_state38 = 93'd137438953472;
parameter    ap_ST_fsm_state39 = 93'd274877906944;
parameter    ap_ST_fsm_state40 = 93'd549755813888;
parameter    ap_ST_fsm_state41 = 93'd1099511627776;
parameter    ap_ST_fsm_state42 = 93'd2199023255552;
parameter    ap_ST_fsm_state43 = 93'd4398046511104;
parameter    ap_ST_fsm_state44 = 93'd8796093022208;
parameter    ap_ST_fsm_state45 = 93'd17592186044416;
parameter    ap_ST_fsm_state46 = 93'd35184372088832;
parameter    ap_ST_fsm_state47 = 93'd70368744177664;
parameter    ap_ST_fsm_state48 = 93'd140737488355328;
parameter    ap_ST_fsm_state49 = 93'd281474976710656;
parameter    ap_ST_fsm_state50 = 93'd562949953421312;
parameter    ap_ST_fsm_state51 = 93'd1125899906842624;
parameter    ap_ST_fsm_state52 = 93'd2251799813685248;
parameter    ap_ST_fsm_state53 = 93'd4503599627370496;
parameter    ap_ST_fsm_state54 = 93'd9007199254740992;
parameter    ap_ST_fsm_state55 = 93'd18014398509481984;
parameter    ap_ST_fsm_state56 = 93'd36028797018963968;
parameter    ap_ST_fsm_state57 = 93'd72057594037927936;
parameter    ap_ST_fsm_state58 = 93'd144115188075855872;
parameter    ap_ST_fsm_state59 = 93'd288230376151711744;
parameter    ap_ST_fsm_state60 = 93'd576460752303423488;
parameter    ap_ST_fsm_state61 = 93'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 93'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 93'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 93'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 93'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 93'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 93'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 93'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 93'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 93'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 93'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 93'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 93'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 93'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 93'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 93'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 93'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 93'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 93'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 93'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 93'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 93'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 93'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 93'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 93'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 93'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 93'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 93'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 93'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 93'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 93'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 93'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 93'd4951760157141521099596496896;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] class_hw;
output   class_hw_ap_vld;
output  [0:0] x_0_address0;
output   x_0_ce0;
input  [31:0] x_0_q0;
output  [0:0] x_1_address0;
output   x_1_ce0;
input  [31:0] x_1_q0;
output  [0:0] x_2_address0;
output   x_2_ce0;
input  [31:0] x_2_q0;
output  [0:0] x_3_address0;
output   x_3_ce0;
input  [31:0] x_3_q0;
output  [0:0] x_4_address0;
output   x_4_ce0;
input  [31:0] x_4_q0;
output  [0:0] x_5_address0;
output   x_5_ce0;
input  [31:0] x_5_q0;
output  [0:0] x_6_address0;
output   x_6_ce0;
input  [31:0] x_6_q0;
output  [0:0] x_7_address0;
output   x_7_ce0;
input  [31:0] x_7_q0;
output  [0:0] x_8_address0;
output   x_8_ce0;
input  [31:0] x_8_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg class_hw_ap_vld;
reg x_0_ce0;
reg x_1_ce0;
reg x_2_ce0;
reg x_3_ce0;
reg x_4_ce0;
reg x_5_ce0;
reg x_6_ce0;
reg x_7_ce0;
reg x_8_ce0;

(* fsm_encoding = "none" *) reg   [92:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] SupVec_0_address0;
reg    SupVec_0_ce0;
wire   [31:0] SupVec_0_q0;
wire   [11:0] SupVec_1_address0;
reg    SupVec_1_ce0;
wire   [31:0] SupVec_1_q0;
wire   [11:0] SupVec_2_address0;
reg    SupVec_2_ce0;
wire   [31:0] SupVec_2_q0;
wire   [11:0] SupVec_3_address0;
reg    SupVec_3_ce0;
wire   [31:0] SupVec_3_q0;
wire   [11:0] SupVec_4_address0;
reg    SupVec_4_ce0;
wire   [31:0] SupVec_4_q0;
wire   [11:0] SupVec_5_address0;
reg    SupVec_5_ce0;
wire   [31:0] SupVec_5_q0;
wire   [11:0] SupVec_6_address0;
reg    SupVec_6_ce0;
wire   [31:0] SupVec_6_q0;
wire   [11:0] SupVec_7_address0;
reg    SupVec_7_ce0;
wire   [31:0] SupVec_7_q0;
wire   [11:0] SupVec_8_address0;
reg    SupVec_8_ce0;
wire   [31:0] SupVec_8_q0;
wire   [10:0] Co_address0;
reg    Co_ce0;
wire   [31:0] Co_q0;
wire   [63:0] grp_fu_465_p1;
reg   [63:0] reg_491;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond5_fu_600_p2;
wire    ap_CS_fsm_state77;
wire   [31:0] grp_fu_441_p2;
reg   [31:0] reg_496;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state48;
wire   [31:0] grp_fu_457_p2;
reg   [31:0] reg_503;
wire    ap_CS_fsm_state13;
reg   [31:0] reg_509;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state34;
wire   [63:0] grp_fu_475_p2;
reg   [63:0] reg_515;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state83;
wire   [10:0] i_1_fu_527_p2;
reg   [10:0] i_1_reg_865;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_1_fu_533_p1;
reg   [63:0] tmp_1_reg_870;
wire   [0:0] exitcond_fu_521_p2;
wire   [12:0] tmp_23_cast_fu_545_p1;
reg   [12:0] tmp_23_cast_reg_875;
wire   [1:0] indvars_iv_next4_fu_606_p2;
reg   [1:0] indvars_iv_next4_reg_883;
wire   [3:0] tmp_22_fu_635_p1;
reg   [3:0] tmp_22_reg_898;
wire   [4:0] j_1_fu_677_p2;
reg   [4:0] j_1_reg_937;
reg   [31:0] x_0_load_reg_947;
wire    ap_CS_fsm_state4;
reg   [31:0] SupVec_0_load_reg_952;
reg   [31:0] x_1_load_reg_957;
reg   [31:0] SupVec_1_load_reg_962;
reg   [31:0] x_7_load_reg_967;
reg   [31:0] SupVec_7_load_reg_972;
reg   [31:0] x_8_load_reg_977;
reg   [31:0] SupVec_8_load_reg_982;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_445_p2;
reg   [31:0] dif1_reg_997;
reg   [31:0] x_2_load_reg_1003;
reg   [31:0] SupVec_2_load_reg_1008;
wire   [31:0] grp_fu_449_p2;
reg   [31:0] dif7_reg_1013;
wire   [31:0] grp_fu_453_p2;
reg   [31:0] dif8_reg_1019;
wire   [0:0] tmp_28_fu_762_p2;
reg   [0:0] tmp_28_reg_1035;
wire   [0:0] tmp_30_fu_773_p2;
reg   [0:0] tmp_30_reg_1041;
wire   [0:0] tmp_32_fu_784_p2;
reg   [0:0] tmp_32_reg_1047;
wire   [31:0] grp_fu_461_p2;
reg   [31:0] mul1_reg_1053;
reg   [31:0] x_3_load_reg_1058;
reg   [31:0] SupVec_3_load_reg_1063;
reg   [31:0] x_4_load_reg_1078;
reg   [31:0] SupVec_4_load_reg_1083;
reg   [31:0] x_5_load_reg_1098;
reg   [31:0] SupVec_5_load_reg_1103;
reg   [31:0] x_6_load_reg_1118;
reg   [31:0] SupVec_6_load_reg_1123;
wire    ap_CS_fsm_state53;
reg   [31:0] Co_load_reg_1133;
wire    ap_CS_fsm_state54;
wire   [63:0] grp_fu_486_p2;
reg   [63:0] tmp_18_reg_1138;
wire   [63:0] grp_fu_469_p2;
reg   [63:0] tmp_20_reg_1143;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state93;
reg   [63:0] sum_reg_384;
reg   [10:0] i_reg_396;
reg   [1:0] indvars_iv3_reg_408;
reg   [31:0] norm_reg_419;
reg   [4:0] j_reg_430;
wire   [63:0] tmp_25_cast_fu_628_p1;
wire   [63:0] newIndex3_fu_612_p1;
wire   [63:0] tmp_23_fu_666_p4;
wire   [63:0] newIndex5_cast_fu_651_p3;
wire   [63:0] tmp_25_fu_709_p4;
wire   [63:0] newIndex7_cast_fu_694_p3;
wire   [63:0] tmp_27_fu_746_p4;
wire   [63:0] newIndex9_cast_fu_731_p3;
wire   [63:0] tmp_29_fu_803_p4;
wire   [63:0] newIndex4_cast_fu_790_p3;
wire   [63:0] tmp_31_fu_827_p4;
wire   [63:0] newIndex6_cast_fu_814_p3;
wire   [63:0] tmp_33_fu_851_p4;
wire   [63:0] newIndex8_cast_fu_838_p3;
reg   [31:0] grp_fu_441_p0;
reg   [31:0] grp_fu_441_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state49;
reg   [31:0] grp_fu_457_p0;
reg   [31:0] grp_fu_457_p1;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state45;
reg   [31:0] grp_fu_465_p0;
reg   [63:0] grp_fu_469_p0;
reg   [63:0] grp_fu_469_p1;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state89;
reg   [63:0] grp_fu_475_p1;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state60;
wire   [11:0] tmp_9_fu_537_p3;
wire   [63:0] sum_to_int_fu_549_p1;
wire   [10:0] tmp_fu_553_p4;
wire   [51:0] tmp_2_fu_563_p1;
wire   [0:0] notrhs_fu_573_p2;
wire   [0:0] notlhs_fu_567_p2;
wire   [0:0] tmp_5_fu_579_p2;
wire   [0:0] tmp_6_fu_480_p2;
wire   [0:0] tmp_7_fu_585_p2;
wire   [12:0] newIndex3_cast_fu_619_p1;
wire   [12:0] tmp_21_fu_623_p2;
wire   [3:0] tmp_4_cast_fu_639_p2;
wire   [0:0] tmp_s_fu_645_p2;
wire   [0:0] not_tmp_s_fu_660_p2;
wire   [3:0] tmp_6_cast_fu_683_p2;
wire   [0:0] tmp_24_fu_688_p2;
wire   [0:0] not_tmp_1_fu_703_p2;
wire   [3:0] tmp_8_cast_fu_720_p2;
wire   [0:0] tmp_26_fu_725_p2;
wire   [0:0] not_tmp_2_fu_740_p2;
wire   [3:0] tmp_cast_fu_757_p2;
wire   [3:0] tmp_5_cast_fu_768_p2;
wire   [3:0] tmp_7_cast_fu_779_p2;
wire   [0:0] not_tmp_3_fu_798_p2;
wire   [0:0] not_tmp_4_fu_822_p2;
wire   [0:0] not_tmp_5_fu_846_p2;
reg   [1:0] grp_fu_441_opcode;
reg   [92:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 93'd1;
end

svm_SupVec_0 #(
    .DataWidth( 32 ),
    .AddressRange( 2444 ),
    .AddressWidth( 12 ))
SupVec_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SupVec_0_address0),
    .ce0(SupVec_0_ce0),
    .q0(SupVec_0_q0)
);

svm_SupVec_1 #(
    .DataWidth( 32 ),
    .AddressRange( 2444 ),
    .AddressWidth( 12 ))
SupVec_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SupVec_1_address0),
    .ce0(SupVec_1_ce0),
    .q0(SupVec_1_q0)
);

svm_SupVec_2 #(
    .DataWidth( 32 ),
    .AddressRange( 2444 ),
    .AddressWidth( 12 ))
SupVec_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SupVec_2_address0),
    .ce0(SupVec_2_ce0),
    .q0(SupVec_2_q0)
);

svm_SupVec_3 #(
    .DataWidth( 32 ),
    .AddressRange( 2444 ),
    .AddressWidth( 12 ))
SupVec_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SupVec_3_address0),
    .ce0(SupVec_3_ce0),
    .q0(SupVec_3_q0)
);

svm_SupVec_4 #(
    .DataWidth( 32 ),
    .AddressRange( 2444 ),
    .AddressWidth( 12 ))
SupVec_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SupVec_4_address0),
    .ce0(SupVec_4_ce0),
    .q0(SupVec_4_q0)
);

svm_SupVec_5 #(
    .DataWidth( 32 ),
    .AddressRange( 2444 ),
    .AddressWidth( 12 ))
SupVec_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SupVec_5_address0),
    .ce0(SupVec_5_ce0),
    .q0(SupVec_5_q0)
);

svm_SupVec_6 #(
    .DataWidth( 32 ),
    .AddressRange( 2444 ),
    .AddressWidth( 12 ))
SupVec_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SupVec_6_address0),
    .ce0(SupVec_6_ce0),
    .q0(SupVec_6_q0)
);

svm_SupVec_7 #(
    .DataWidth( 32 ),
    .AddressRange( 2444 ),
    .AddressWidth( 12 ))
SupVec_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SupVec_7_address0),
    .ce0(SupVec_7_ce0),
    .q0(SupVec_7_q0)
);

svm_SupVec_8 #(
    .DataWidth( 32 ),
    .AddressRange( 2444 ),
    .AddressWidth( 12 ))
SupVec_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SupVec_8_address0),
    .ce0(SupVec_8_ce0),
    .q0(SupVec_8_q0)
);

svm_Co #(
    .DataWidth( 32 ),
    .AddressRange( 1222 ),
    .AddressWidth( 11 ))
Co_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Co_address0),
    .ce0(Co_ce0),
    .q0(Co_q0)
);

svm_faddfsub_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
svm_faddfsub_32nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_441_p0),
    .din1(grp_fu_441_p1),
    .opcode(grp_fu_441_opcode),
    .ce(1'b1),
    .dout(grp_fu_441_p2)
);

svm_fsub_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
svm_fsub_32ns_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_1_load_reg_957),
    .din1(SupVec_1_load_reg_962),
    .ce(1'b1),
    .dout(grp_fu_445_p2)
);

svm_fsub_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
svm_fsub_32ns_32ncud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_7_load_reg_967),
    .din1(SupVec_7_load_reg_972),
    .ce(1'b1),
    .dout(grp_fu_449_p2)
);

svm_fsub_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
svm_fsub_32ns_32ncud_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_8_load_reg_977),
    .din1(SupVec_8_load_reg_982),
    .ce(1'b1),
    .dout(grp_fu_453_p2)
);

svm_fmul_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
svm_fmul_32ns_32ndEe_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_457_p0),
    .din1(grp_fu_457_p1),
    .ce(1'b1),
    .dout(grp_fu_457_p2)
);

svm_fmul_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
svm_fmul_32ns_32ndEe_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dif1_reg_997),
    .din1(dif1_reg_997),
    .ce(1'b1),
    .dout(grp_fu_461_p2)
);

svm_fpext_32ns_64eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
svm_fpext_32ns_64eOg_U7(
    .din0(grp_fu_465_p0),
    .dout(grp_fu_465_p1)
);

svm_dadd_64ns_64nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
svm_dadd_64ns_64nfYi_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_469_p0),
    .din1(grp_fu_469_p1),
    .ce(1'b1),
    .dout(grp_fu_469_p2)
);

svm_dmul_64ns_64ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
svm_dmul_64ns_64ng8j_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_491),
    .din1(grp_fu_475_p1),
    .ce(1'b1),
    .dout(grp_fu_475_p2)
);

svm_dcmp_64ns_64nhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
svm_dcmp_64ns_64nhbi_U10(
    .din0(sum_reg_384),
    .din1(64'd0),
    .opcode(5'd2),
    .dout(tmp_6_fu_480_p2)
);

svm_dexp_64ns_64nibs #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
svm_dexp_64ns_64nibs_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(reg_515),
    .ce(1'b1),
    .dout(grp_fu_486_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        i_reg_396 <= i_1_reg_865;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_396 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_521_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvars_iv3_reg_408 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        indvars_iv3_reg_408 <= indvars_iv_next4_reg_883;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_521_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_430 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        j_reg_430 <= j_1_reg_937;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_521_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        norm_reg_419 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        norm_reg_419 <= grp_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        sum_reg_384 <= grp_fu_469_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_reg_384 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        Co_load_reg_1133 <= Co_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        SupVec_0_load_reg_952 <= SupVec_0_q0;
        SupVec_1_load_reg_962 <= SupVec_1_q0;
        SupVec_7_load_reg_972 <= SupVec_7_q0;
        SupVec_8_load_reg_982 <= SupVec_8_q0;
        x_0_load_reg_947 <= x_0_q0;
        x_1_load_reg_957 <= x_1_q0;
        x_7_load_reg_967 <= x_7_q0;
        x_8_load_reg_977 <= x_8_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        SupVec_2_load_reg_1008 <= SupVec_2_q0;
        dif1_reg_997 <= grp_fu_445_p2;
        dif7_reg_1013 <= grp_fu_449_p2;
        dif8_reg_1019 <= grp_fu_453_p2;
        x_2_load_reg_1003 <= x_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SupVec_3_load_reg_1063 <= SupVec_3_q0;
        x_3_load_reg_1058 <= x_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        SupVec_4_load_reg_1083 <= SupVec_4_q0;
        x_4_load_reg_1078 <= x_4_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        SupVec_5_load_reg_1103 <= SupVec_5_q0;
        x_5_load_reg_1098 <= x_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        SupVec_6_load_reg_1123 <= SupVec_6_q0;
        x_6_load_reg_1118 <= x_6_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_865 <= i_1_fu_527_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        indvars_iv_next4_reg_883 <= indvars_iv_next4_fu_606_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_600_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_1_reg_937 <= j_1_fu_677_p2;
        tmp_22_reg_898 <= tmp_22_fu_635_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mul1_reg_1053 <= grp_fu_461_p2;
        tmp_28_reg_1035 <= tmp_28_fu_762_p2;
        tmp_30_reg_1041 <= tmp_30_fu_773_p2;
        tmp_32_reg_1047 <= tmp_32_fu_784_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state77) | ((exitcond5_fu_600_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        reg_491 <= grp_fu_465_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_496 <= grp_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_503 <= grp_fu_457_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_509 <= grp_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state59))) begin
        reg_515 <= grp_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        tmp_18_reg_1138 <= grp_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_521_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_reg_870[10 : 0] <= tmp_1_fu_533_p1[10 : 0];
        tmp_23_cast_reg_875[11 : 1] <= tmp_23_cast_fu_545_p1[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        tmp_20_reg_1143 <= grp_fu_469_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Co_ce0 = 1'b1;
    end else begin
        Co_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        SupVec_0_ce0 = 1'b1;
    end else begin
        SupVec_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        SupVec_1_ce0 = 1'b1;
    end else begin
        SupVec_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        SupVec_2_ce0 = 1'b1;
    end else begin
        SupVec_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        SupVec_3_ce0 = 1'b1;
    end else begin
        SupVec_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        SupVec_4_ce0 = 1'b1;
    end else begin
        SupVec_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        SupVec_5_ce0 = 1'b1;
    end else begin
        SupVec_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        SupVec_6_ce0 = 1'b1;
    end else begin
        SupVec_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        SupVec_7_ce0 = 1'b1;
    end else begin
        SupVec_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        SupVec_8_ce0 = 1'b1;
    end else begin
        SupVec_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_521_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_521_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_521_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        class_hw_ap_vld = 1'b1;
    end else begin
        class_hw_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_441_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_fu_441_opcode = 2'd0;
    end else begin
        grp_fu_441_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_441_p0 = x_6_load_reg_1118;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_441_p0 = x_5_load_reg_1098;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_441_p0 = x_4_load_reg_1078;
    end else if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_441_p0 = reg_496;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_441_p0 = x_3_load_reg_1058;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_441_p0 = reg_503;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_441_p0 = x_2_load_reg_1003;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_441_p0 = x_0_load_reg_947;
    end else begin
        grp_fu_441_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_441_p1 = SupVec_6_load_reg_1123;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_441_p1 = SupVec_5_load_reg_1103;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_441_p1 = SupVec_4_load_reg_1083;
    end else if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_441_p1 = reg_503;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_441_p1 = SupVec_3_load_reg_1063;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_441_p1 = mul1_reg_1053;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_441_p1 = SupVec_2_load_reg_1008;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_441_p1 = SupVec_0_load_reg_952;
    end else begin
        grp_fu_441_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_457_p0 = dif8_reg_1019;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_457_p0 = dif7_reg_1013;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20))) begin
        grp_fu_457_p0 = reg_509;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_457_p0 = reg_496;
    end else begin
        grp_fu_457_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_457_p1 = dif8_reg_1019;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_457_p1 = dif7_reg_1013;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20))) begin
        grp_fu_457_p1 = reg_509;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_457_p1 = reg_496;
    end else begin
        grp_fu_457_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        grp_fu_465_p0 = Co_load_reg_1133;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_465_p0 = norm_reg_419;
    end else begin
        grp_fu_465_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        grp_fu_469_p0 = sum_reg_384;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        grp_fu_469_p0 = reg_515;
    end else begin
        grp_fu_469_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        grp_fu_469_p1 = tmp_20_reg_1143;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        grp_fu_469_p1 = 64'd13836900027705851904;
    end else begin
        grp_fu_469_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_475_p1 = tmp_18_reg_1138;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_475_p1 = 64'd13844065254536904704;
    end else begin
        grp_fu_475_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_0_ce0 = 1'b1;
    end else begin
        x_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_1_ce0 = 1'b1;
    end else begin
        x_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        x_2_ce0 = 1'b1;
    end else begin
        x_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        x_3_ce0 = 1'b1;
    end else begin
        x_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        x_4_ce0 = 1'b1;
    end else begin
        x_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        x_5_ce0 = 1'b1;
    end else begin
        x_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        x_6_ce0 = 1'b1;
    end else begin
        x_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_7_ce0 = 1'b1;
    end else begin
        x_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_8_ce0 = 1'b1;
    end else begin
        x_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_521_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond5_fu_600_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Co_address0 = tmp_1_reg_870;

assign SupVec_0_address0 = tmp_25_cast_fu_628_p1;

assign SupVec_1_address0 = tmp_23_fu_666_p4;

assign SupVec_2_address0 = tmp_25_fu_709_p4;

assign SupVec_3_address0 = tmp_27_fu_746_p4;

assign SupVec_4_address0 = tmp_29_fu_803_p4;

assign SupVec_5_address0 = tmp_31_fu_827_p4;

assign SupVec_6_address0 = tmp_33_fu_851_p4;

assign SupVec_7_address0 = tmp_25_cast_fu_628_p1;

assign SupVec_8_address0 = tmp_25_cast_fu_628_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign class_hw = ((tmp_7_fu_585_p2[0:0] === 1'b1) ? 16'd1 : 16'd65535);

assign exitcond5_fu_600_p2 = ((indvars_iv3_reg_408 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond_fu_521_p2 = ((i_reg_396 == 11'd1222) ? 1'b1 : 1'b0);

assign i_1_fu_527_p2 = (i_reg_396 + 11'd1);

assign indvars_iv_next4_fu_606_p2 = (indvars_iv3_reg_408 + 2'd1);

assign j_1_fu_677_p2 = (5'd9 + j_reg_430);

assign newIndex3_cast_fu_619_p1 = indvars_iv3_reg_408;

assign newIndex3_fu_612_p1 = indvars_iv3_reg_408;

assign newIndex4_cast_fu_790_p3 = ((tmp_28_reg_1035[0:0] === 1'b1) ? 64'd0 : 64'd1);

assign newIndex5_cast_fu_651_p3 = ((tmp_s_fu_645_p2[0:0] === 1'b1) ? 64'd0 : 64'd1);

assign newIndex6_cast_fu_814_p3 = ((tmp_30_reg_1041[0:0] === 1'b1) ? 64'd0 : 64'd1);

assign newIndex7_cast_fu_694_p3 = ((tmp_24_fu_688_p2[0:0] === 1'b1) ? 64'd0 : 64'd1);

assign newIndex8_cast_fu_838_p3 = ((tmp_32_reg_1047[0:0] === 1'b1) ? 64'd0 : 64'd1);

assign newIndex9_cast_fu_731_p3 = ((tmp_26_fu_725_p2[0:0] === 1'b1) ? 64'd0 : 64'd1);

assign not_tmp_1_fu_703_p2 = (tmp_24_fu_688_p2 ^ 1'd1);

assign not_tmp_2_fu_740_p2 = (tmp_26_fu_725_p2 ^ 1'd1);

assign not_tmp_3_fu_798_p2 = (tmp_28_reg_1035 ^ 1'd1);

assign not_tmp_4_fu_822_p2 = (tmp_30_reg_1041 ^ 1'd1);

assign not_tmp_5_fu_846_p2 = (tmp_32_reg_1047 ^ 1'd1);

assign not_tmp_s_fu_660_p2 = (tmp_s_fu_645_p2 ^ 1'd1);

assign notlhs_fu_567_p2 = ((tmp_fu_553_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notrhs_fu_573_p2 = ((tmp_2_fu_563_p1 == 52'd0) ? 1'b1 : 1'b0);

assign sum_to_int_fu_549_p1 = sum_reg_384;

assign tmp_1_fu_533_p1 = i_reg_396;

assign tmp_21_fu_623_p2 = (newIndex3_cast_fu_619_p1 + tmp_23_cast_reg_875);

assign tmp_22_fu_635_p1 = j_reg_430[3:0];

assign tmp_23_cast_fu_545_p1 = tmp_9_fu_537_p3;

assign tmp_23_fu_666_p4 = {{{{52'd0}, {i_reg_396}}}, {not_tmp_s_fu_660_p2}};

assign tmp_24_fu_688_p2 = ((tmp_6_cast_fu_683_p2 < 4'd9) ? 1'b1 : 1'b0);

assign tmp_25_cast_fu_628_p1 = tmp_21_fu_623_p2;

assign tmp_25_fu_709_p4 = {{{{52'd0}, {i_reg_396}}}, {not_tmp_1_fu_703_p2}};

assign tmp_26_fu_725_p2 = ((tmp_8_cast_fu_720_p2 < 4'd9) ? 1'b1 : 1'b0);

assign tmp_27_fu_746_p4 = {{{{52'd0}, {i_reg_396}}}, {not_tmp_2_fu_740_p2}};

assign tmp_28_fu_762_p2 = ((tmp_cast_fu_757_p2 < 4'd9) ? 1'b1 : 1'b0);

assign tmp_29_fu_803_p4 = {{{{52'd0}, {i_reg_396}}}, {not_tmp_3_fu_798_p2}};

assign tmp_2_fu_563_p1 = sum_to_int_fu_549_p1[51:0];

assign tmp_30_fu_773_p2 = ((tmp_5_cast_fu_768_p2 < 4'd9) ? 1'b1 : 1'b0);

assign tmp_31_fu_827_p4 = {{{{52'd0}, {i_reg_396}}}, {not_tmp_4_fu_822_p2}};

assign tmp_32_fu_784_p2 = ((tmp_7_cast_fu_779_p2 < 4'd9) ? 1'b1 : 1'b0);

assign tmp_33_fu_851_p4 = {{{{52'd0}, {i_reg_396}}}, {not_tmp_5_fu_846_p2}};

assign tmp_4_cast_fu_639_p2 = (4'd1 + tmp_22_fu_635_p1);

assign tmp_5_cast_fu_768_p2 = (4'd5 + tmp_22_reg_898);

assign tmp_5_fu_579_p2 = (notrhs_fu_573_p2 | notlhs_fu_567_p2);

assign tmp_6_cast_fu_683_p2 = (4'd2 + tmp_22_reg_898);

assign tmp_7_cast_fu_779_p2 = (4'd6 + tmp_22_reg_898);

assign tmp_7_fu_585_p2 = (tmp_6_fu_480_p2 & tmp_5_fu_579_p2);

assign tmp_8_cast_fu_720_p2 = (4'd3 + tmp_22_reg_898);

assign tmp_9_fu_537_p3 = {{i_reg_396}, {1'd0}};

assign tmp_cast_fu_757_p2 = (4'd4 + tmp_22_reg_898);

assign tmp_fu_553_p4 = {{sum_to_int_fu_549_p1[62:52]}};

assign tmp_s_fu_645_p2 = ((tmp_4_cast_fu_639_p2 < 4'd9) ? 1'b1 : 1'b0);

assign x_0_address0 = newIndex3_fu_612_p1;

assign x_1_address0 = newIndex5_cast_fu_651_p3;

assign x_2_address0 = newIndex7_cast_fu_694_p3;

assign x_3_address0 = newIndex9_cast_fu_731_p3;

assign x_4_address0 = newIndex4_cast_fu_790_p3;

assign x_5_address0 = newIndex6_cast_fu_814_p3;

assign x_6_address0 = newIndex8_cast_fu_838_p3;

assign x_7_address0 = newIndex3_fu_612_p1;

assign x_8_address0 = newIndex3_fu_612_p1;

always @ (posedge ap_clk) begin
    tmp_1_reg_870[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_23_cast_reg_875[0] <= 1'b0;
    tmp_23_cast_reg_875[12] <= 1'b0;
end

endmodule //svm
