-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_V : OUT STD_LOGIC_VECTOR (18 downto 0);
    y_V_ap_vld : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.710000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=72,HLS_SYN_LUT=182,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shift_reg_V_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shift_reg_V_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shift_reg_V_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shift_reg_V_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shift_reg_V_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shift_reg_V_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shift_reg_V_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal r_V_8_fu_229_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_8_reg_333 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_shl4_fu_79_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_87_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_fu_75_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_fu_57_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_1_fu_91_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_fu_101_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal lhs_V_1_fu_97_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl2_fu_121_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_fu_133_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_129_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_cast_fu_141_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_2_fu_105_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_3_fu_145_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_1_fu_155_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lhs_V_2_fu_151_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_fu_179_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_V_5_cast2_fu_175_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_187_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_5_fu_191_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_2_cast_fu_197_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_4_fu_159_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_7_fu_217_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_3_cast_fu_225_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_6_fu_201_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl_fu_249_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_257_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_V_9_cast1_fu_245_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_9_fu_261_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_9_cast_fu_267_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_4_cast_fu_274_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_V_10_cast_fu_271_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_11_fu_294_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_5_cast_fu_302_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_10_fu_278_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal rhs_V_6_cast_fu_318_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_12_fu_306_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_13_fu_322_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                r_V_8_reg_333 <= r_V_8_fu_229_p2;
                shift_reg_V_3 <= shift_reg_V_2;
                shift_reg_V_4 <= shift_reg_V_3;
                shift_reg_V_5 <= shift_reg_V_4;
                shift_reg_V_6 <= shift_reg_V_5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                shift_reg_V_0 <= x_V;
                shift_reg_V_1 <= shift_reg_V_0;
                shift_reg_V_2 <= shift_reg_V_1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_10_cast_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_8_reg_333),15));
    lhs_V_1_fu_97_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_57_p3),13));
    lhs_V_2_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_fu_105_p2),14));
    lhs_V_5_cast2_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_reg_V_3),11));
    lhs_V_9_cast1_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_reg_V_1),11));
    lhs_V_fu_75_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_reg_V_5),12));
    p_shl1_cast_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_179_p3),11));
    p_shl1_fu_179_p3 <= (shift_reg_V_3 & ap_const_lv2_0);
    p_shl2_cast_fu_129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_121_p3),12));
    p_shl2_fu_121_p3 <= (shift_reg_V_4 & ap_const_lv3_0);
    p_shl3_cast_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_133_p3),12));
    p_shl3_fu_133_p3 <= (shift_reg_V_4 & ap_const_lv1_0);
    p_shl4_cast_fu_87_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_79_p3),12));
    p_shl4_fu_79_p3 <= (shift_reg_V_5 & ap_const_lv3_0);
    p_shl_cast_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_249_p3),11));
    p_shl_fu_249_p3 <= (shift_reg_V_1 & ap_const_lv2_0);
    r_V_10_fu_278_p2 <= std_logic_vector(unsigned(rhs_V_4_cast_fu_274_p1) + unsigned(lhs_V_10_cast_fu_271_p1));
    r_V_11_fu_294_p3 <= (shift_reg_V_0 & ap_const_lv1_0);
    r_V_12_fu_306_p2 <= std_logic_vector(unsigned(rhs_V_5_cast_fu_302_p1) + unsigned(r_V_10_fu_278_p2));
    r_V_13_fu_322_p2 <= std_logic_vector(unsigned(rhs_V_6_cast_fu_318_p1) + unsigned(r_V_12_fu_306_p2));
    r_V_1_fu_91_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_87_p1) - unsigned(lhs_V_fu_75_p1));
    r_V_2_fu_105_p2 <= std_logic_vector(unsigned(rhs_V_fu_101_p1) + unsigned(lhs_V_1_fu_97_p1));
    r_V_3_fu_145_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_129_p1) - unsigned(p_shl3_cast_fu_141_p1));
    r_V_4_fu_159_p2 <= std_logic_vector(unsigned(rhs_V_1_fu_155_p1) + unsigned(lhs_V_2_fu_151_p1));
    r_V_5_fu_191_p2 <= std_logic_vector(unsigned(lhs_V_5_cast2_fu_175_p1) + unsigned(p_shl1_cast_fu_187_p1));
    r_V_6_fu_201_p2 <= std_logic_vector(unsigned(rhs_V_2_cast_fu_197_p1) + unsigned(r_V_4_fu_159_p2));
    r_V_7_fu_217_p3 <= (shift_reg_V_2 & ap_const_lv2_0);
    r_V_8_fu_229_p2 <= std_logic_vector(unsigned(rhs_V_3_cast_fu_225_p1) + unsigned(r_V_6_fu_201_p2));
        r_V_9_cast_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_9_fu_261_p2),12));

    r_V_9_fu_261_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_257_p1) - unsigned(lhs_V_9_cast1_fu_245_p1));
    r_V_fu_57_p3 <= (shift_reg_V_6 & ap_const_lv3_0);
    rhs_V_1_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_fu_145_p2),14));
    rhs_V_2_cast_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_5_fu_191_p2),14));
    rhs_V_3_cast_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_7_fu_217_p3),14));
    rhs_V_4_cast_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_9_cast_fu_267_p1),15));
    rhs_V_5_cast_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_11_fu_294_p3),15));
    rhs_V_6_cast_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_V),15));
    rhs_V_fu_101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_fu_91_p2),13));
    y_V <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_13_fu_322_p2),19));

    y_V_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            y_V_ap_vld <= ap_const_logic_1;
        else 
            y_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
