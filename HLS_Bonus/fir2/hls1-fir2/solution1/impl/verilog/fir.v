// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.710000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=72,HLS_SYN_LUT=182,HLS_VERSION=2018_2}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y_V,
        y_V_ap_vld,
        x_V
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [18:0] y_V;
output   y_V_ap_vld;
input  [7:0] x_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_V_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] shift_reg_V_6;
reg   [7:0] shift_reg_V_5;
reg   [7:0] shift_reg_V_4;
reg   [7:0] shift_reg_V_3;
reg   [7:0] shift_reg_V_2;
reg   [7:0] shift_reg_V_1;
reg   [7:0] shift_reg_V_0;
wire   [13:0] r_V_8_fu_229_p2;
reg   [13:0] r_V_8_reg_333;
wire    ap_CS_fsm_state2;
wire   [10:0] p_shl4_fu_79_p3;
wire   [11:0] p_shl4_cast_fu_87_p1;
wire   [11:0] lhs_V_fu_75_p1;
wire   [10:0] r_V_fu_57_p3;
wire   [11:0] r_V_1_fu_91_p2;
wire   [12:0] rhs_V_fu_101_p1;
wire   [12:0] lhs_V_1_fu_97_p1;
wire   [10:0] p_shl2_fu_121_p3;
wire   [8:0] p_shl3_fu_133_p3;
wire   [11:0] p_shl2_cast_fu_129_p1;
wire   [11:0] p_shl3_cast_fu_141_p1;
wire   [12:0] r_V_2_fu_105_p2;
wire   [11:0] r_V_3_fu_145_p2;
wire   [13:0] rhs_V_1_fu_155_p1;
wire   [13:0] lhs_V_2_fu_151_p1;
wire   [9:0] p_shl1_fu_179_p3;
wire   [10:0] lhs_V_5_cast2_fu_175_p1;
wire   [10:0] p_shl1_cast_fu_187_p1;
wire   [10:0] r_V_5_fu_191_p2;
wire   [13:0] rhs_V_2_cast_fu_197_p1;
wire   [13:0] r_V_4_fu_159_p2;
wire   [9:0] r_V_7_fu_217_p3;
wire   [13:0] rhs_V_3_cast_fu_225_p1;
wire   [13:0] r_V_6_fu_201_p2;
wire   [9:0] p_shl_fu_249_p3;
wire   [10:0] p_shl_cast_fu_257_p1;
wire   [10:0] lhs_V_9_cast1_fu_245_p1;
wire   [10:0] r_V_9_fu_261_p2;
wire  signed [11:0] r_V_9_cast_fu_267_p1;
wire   [14:0] rhs_V_4_cast_fu_274_p1;
wire   [14:0] lhs_V_10_cast_fu_271_p1;
wire   [8:0] r_V_11_fu_294_p3;
wire   [14:0] rhs_V_5_cast_fu_302_p1;
wire   [14:0] r_V_10_fu_278_p2;
wire   [14:0] rhs_V_6_cast_fu_318_p1;
wire   [14:0] r_V_12_fu_306_p2;
wire   [14:0] r_V_13_fu_322_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 shift_reg_V_6 = 8'd0;
#0 shift_reg_V_5 = 8'd0;
#0 shift_reg_V_4 = 8'd0;
#0 shift_reg_V_3 = 8'd0;
#0 shift_reg_V_2 = 8'd0;
#0 shift_reg_V_1 = 8'd0;
#0 shift_reg_V_0 = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_V_8_reg_333 <= r_V_8_fu_229_p2;
        shift_reg_V_3 <= shift_reg_V_2;
        shift_reg_V_4 <= shift_reg_V_3;
        shift_reg_V_5 <= shift_reg_V_4;
        shift_reg_V_6 <= shift_reg_V_5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shift_reg_V_0 <= x_V;
        shift_reg_V_1 <= shift_reg_V_0;
        shift_reg_V_2 <= shift_reg_V_1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_V_ap_vld = 1'b1;
    end else begin
        y_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign lhs_V_10_cast_fu_271_p1 = r_V_8_reg_333;

assign lhs_V_1_fu_97_p1 = r_V_fu_57_p3;

assign lhs_V_2_fu_151_p1 = r_V_2_fu_105_p2;

assign lhs_V_5_cast2_fu_175_p1 = shift_reg_V_3;

assign lhs_V_9_cast1_fu_245_p1 = shift_reg_V_1;

assign lhs_V_fu_75_p1 = shift_reg_V_5;

assign p_shl1_cast_fu_187_p1 = p_shl1_fu_179_p3;

assign p_shl1_fu_179_p3 = {{shift_reg_V_3}, {2'd0}};

assign p_shl2_cast_fu_129_p1 = p_shl2_fu_121_p3;

assign p_shl2_fu_121_p3 = {{shift_reg_V_4}, {3'd0}};

assign p_shl3_cast_fu_141_p1 = p_shl3_fu_133_p3;

assign p_shl3_fu_133_p3 = {{shift_reg_V_4}, {1'd0}};

assign p_shl4_cast_fu_87_p1 = p_shl4_fu_79_p3;

assign p_shl4_fu_79_p3 = {{shift_reg_V_5}, {3'd0}};

assign p_shl_cast_fu_257_p1 = p_shl_fu_249_p3;

assign p_shl_fu_249_p3 = {{shift_reg_V_1}, {2'd0}};

assign r_V_10_fu_278_p2 = (rhs_V_4_cast_fu_274_p1 + lhs_V_10_cast_fu_271_p1);

assign r_V_11_fu_294_p3 = {{shift_reg_V_0}, {1'd0}};

assign r_V_12_fu_306_p2 = (rhs_V_5_cast_fu_302_p1 + r_V_10_fu_278_p2);

assign r_V_13_fu_322_p2 = (rhs_V_6_cast_fu_318_p1 + r_V_12_fu_306_p2);

assign r_V_1_fu_91_p2 = (p_shl4_cast_fu_87_p1 - lhs_V_fu_75_p1);

assign r_V_2_fu_105_p2 = (rhs_V_fu_101_p1 + lhs_V_1_fu_97_p1);

assign r_V_3_fu_145_p2 = (p_shl2_cast_fu_129_p1 - p_shl3_cast_fu_141_p1);

assign r_V_4_fu_159_p2 = (rhs_V_1_fu_155_p1 + lhs_V_2_fu_151_p1);

assign r_V_5_fu_191_p2 = (lhs_V_5_cast2_fu_175_p1 + p_shl1_cast_fu_187_p1);

assign r_V_6_fu_201_p2 = (rhs_V_2_cast_fu_197_p1 + r_V_4_fu_159_p2);

assign r_V_7_fu_217_p3 = {{shift_reg_V_2}, {2'd0}};

assign r_V_8_fu_229_p2 = (rhs_V_3_cast_fu_225_p1 + r_V_6_fu_201_p2);

assign r_V_9_cast_fu_267_p1 = $signed(r_V_9_fu_261_p2);

assign r_V_9_fu_261_p2 = (p_shl_cast_fu_257_p1 - lhs_V_9_cast1_fu_245_p1);

assign r_V_fu_57_p3 = {{shift_reg_V_6}, {3'd0}};

assign rhs_V_1_fu_155_p1 = r_V_3_fu_145_p2;

assign rhs_V_2_cast_fu_197_p1 = r_V_5_fu_191_p2;

assign rhs_V_3_cast_fu_225_p1 = r_V_7_fu_217_p3;

assign rhs_V_4_cast_fu_274_p1 = $unsigned(r_V_9_cast_fu_267_p1);

assign rhs_V_5_cast_fu_302_p1 = r_V_11_fu_294_p3;

assign rhs_V_6_cast_fu_318_p1 = x_V;

assign rhs_V_fu_101_p1 = r_V_1_fu_91_p2;

assign y_V = r_V_13_fu_322_p2;

endmodule //fir
