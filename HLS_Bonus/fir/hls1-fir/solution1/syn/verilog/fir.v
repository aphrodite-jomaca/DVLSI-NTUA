// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=41,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=215,HLS_SYN_LUT=202,HLS_VERSION=2018_2}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        x
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [31:0] shift_reg_d0;
wire   [31:0] shift_reg_q0;
wire   [2:0] c1_address0;
reg    c1_ce0;
wire   [3:0] c1_q0;
wire  signed [31:0] i_cast_fu_133_p1;
reg  signed [31:0] i_cast_reg_184;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_1_fu_145_p2;
reg   [0:0] tmp_1_reg_193;
wire   [0:0] tmp_fu_137_p3;
wire    ap_CS_fsm_state3;
wire   [3:0] grp_fu_126_p2;
reg   [3:0] i_1_reg_212;
reg   [3:0] c1_load_reg_217;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp_6_fu_167_p2;
reg   [31:0] tmp_6_reg_222;
wire    ap_CS_fsm_state5;
wire   [31:0] acc_1_fu_173_p2;
wire    ap_CS_fsm_state6;
reg   [31:0] acc_reg_91;
wire  signed [3:0] ap_phi_mux_i_phi_fu_108_p4;
reg  signed [3:0] i_reg_104;
reg  signed [31:0] data1_reg_116;
wire   [63:0] tmp_3_fu_151_p1;
wire   [63:0] tmp_4_fu_156_p1;
wire   [63:0] tmp_5_fu_160_p1;
reg  signed [3:0] grp_fu_126_p0;
wire   [3:0] tmp_6_fu_167_p0;
reg   [5:0] ap_NS_fsm;
wire   [31:0] tmp_6_fu_167_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_d0),
    .q0(shift_reg_q0)
);

fir_c1 #(
    .DataWidth( 4 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
c1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c1_address0),
    .ce0(c1_ce0),
    .q0(c1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        acc_reg_91 <= acc_1_fu_173_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        acc_reg_91 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_193 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        data1_reg_116 <= shift_reg_q0;
    end else if (((tmp_fu_137_p3 == 1'd0) & (tmp_1_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        data1_reg_116 <= x;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_104 <= i_1_reg_212;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_104 <= 4'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c1_load_reg_217 <= c1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_212 <= grp_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_cast_reg_184 <= i_cast_fu_133_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_137_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_reg_193 <= tmp_1_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_6_reg_222 <= tmp_6_fu_167_p2;
    end
end

always @ (*) begin
    if (((tmp_fu_137_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_137_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c1_ce0 = 1'b1;
    end else begin
        c1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_126_p0 = i_reg_104;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_126_p0 = ap_phi_mux_i_phi_fu_108_p4;
    end else begin
        grp_fu_126_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_address0 = tmp_4_fu_156_p1;
    end else if (((tmp_fu_137_p3 == 1'd0) & (tmp_1_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_address0 = 3'd0;
    end else if (((tmp_fu_137_p3 == 1'd0) & (tmp_1_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_address0 = tmp_3_fu_151_p1;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((tmp_fu_137_p3 == 1'd0) & (tmp_1_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_fu_137_p3 == 1'd0) & (tmp_1_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_d0 = shift_reg_q0;
    end else if (((tmp_fu_137_p3 == 1'd0) & (tmp_1_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_d0 = x;
    end else begin
        shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_1_reg_193 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((tmp_fu_137_p3 == 1'd0) & (tmp_1_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_we0 = 1'b1;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_137_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_137_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_173_p2 = (tmp_6_reg_222 + acc_reg_91);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_phi_mux_i_phi_fu_108_p4 = i_reg_104;

assign c1_address0 = tmp_5_fu_160_p1;

assign grp_fu_126_p2 = ($signed(grp_fu_126_p0) + $signed(4'd15));

assign i_cast_fu_133_p1 = i_reg_104;

assign tmp_1_fu_145_p2 = ((i_reg_104 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_3_fu_151_p1 = grp_fu_126_p2;

assign tmp_4_fu_156_p1 = $unsigned(i_cast_reg_184);

assign tmp_5_fu_160_p1 = $unsigned(i_cast_reg_184);

assign tmp_6_fu_167_p0 = tmp_6_fu_167_p00;

assign tmp_6_fu_167_p00 = c1_load_reg_217;

assign tmp_6_fu_167_p2 = ($signed({{1'b0}, {tmp_6_fu_167_p0}}) * $signed(data1_reg_116));

assign tmp_fu_137_p3 = i_reg_104[32'd3];

assign y = acc_reg_91;

endmodule //fir
