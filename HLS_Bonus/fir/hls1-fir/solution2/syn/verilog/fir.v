// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.710000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=72,HLS_SYN_LUT=182,HLS_VERSION=2018_2}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        x
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [18:0] y;
output   y_ap_vld;
input  [7:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] shift_reg_6;
reg   [7:0] shift_reg_5;
reg   [7:0] shift_reg_4;
reg   [7:0] shift_reg_3;
reg   [7:0] shift_reg_2;
reg   [7:0] shift_reg_1;
reg   [7:0] shift_reg_0;
wire   [13:0] acc5_fu_229_p2;
reg   [13:0] acc5_reg_333;
wire    ap_CS_fsm_state2;
wire   [10:0] p_shl4_fu_79_p3;
wire   [11:0] p_shl4_cast_fu_87_p1;
wire   [11:0] tmp_2_fu_75_p1;
wire   [10:0] acc1_fu_57_p3;
wire   [11:0] mul_fu_91_p2;
wire   [12:0] tmp_5_fu_101_p1;
wire   [12:0] tmp_4_fu_97_p1;
wire   [10:0] p_shl2_fu_121_p3;
wire   [8:0] p_shl3_fu_133_p3;
wire   [11:0] p_shl2_cast_fu_129_p1;
wire   [11:0] p_shl3_cast_fu_141_p1;
wire   [12:0] acc2_fu_105_p2;
wire   [11:0] mul_1_fu_145_p2;
wire   [13:0] tmp_s_fu_155_p1;
wire   [13:0] tmp_9_fu_151_p1;
wire   [9:0] p_shl1_fu_179_p3;
wire   [10:0] tmp_1_cast2_fu_175_p1;
wire   [10:0] p_shl1_cast_fu_187_p1;
wire   [10:0] mul_2_fu_191_p2;
wire   [13:0] tmp_6_cast_fu_197_p1;
wire   [13:0] acc3_fu_159_p2;
wire   [9:0] mul_3_fu_217_p3;
wire   [13:0] tmp_11_cast_fu_225_p1;
wire   [13:0] acc4_fu_201_p2;
wire   [9:0] p_shl_fu_249_p3;
wire   [10:0] p_shl_cast_fu_257_p1;
wire   [10:0] tmp_12_cast1_fu_245_p1;
wire   [10:0] mul_4_fu_261_p2;
wire  signed [11:0] mul_4_cast_fu_267_p1;
wire   [14:0] tmp_14_cast_fu_274_p1;
wire   [14:0] tmp_13_cast_fu_271_p1;
wire   [8:0] mul_5_fu_294_p3;
wire   [14:0] tmp_17_cast_fu_302_p1;
wire   [14:0] acc6_fu_278_p2;
wire   [14:0] tmp_19_cast_fu_318_p1;
wire   [14:0] acc7_fu_306_p2;
wire   [14:0] acc8_fu_322_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 shift_reg_6 = 8'd0;
#0 shift_reg_5 = 8'd0;
#0 shift_reg_4 = 8'd0;
#0 shift_reg_3 = 8'd0;
#0 shift_reg_2 = 8'd0;
#0 shift_reg_1 = 8'd0;
#0 shift_reg_0 = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        acc5_reg_333 <= acc5_fu_229_p2;
        shift_reg_3 <= shift_reg_2;
        shift_reg_4 <= shift_reg_3;
        shift_reg_5 <= shift_reg_4;
        shift_reg_6 <= shift_reg_5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shift_reg_0 <= x;
        shift_reg_1 <= shift_reg_0;
        shift_reg_2 <= shift_reg_1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc1_fu_57_p3 = {{shift_reg_6}, {3'd0}};

assign acc2_fu_105_p2 = (tmp_5_fu_101_p1 + tmp_4_fu_97_p1);

assign acc3_fu_159_p2 = (tmp_s_fu_155_p1 + tmp_9_fu_151_p1);

assign acc4_fu_201_p2 = (tmp_6_cast_fu_197_p1 + acc3_fu_159_p2);

assign acc5_fu_229_p2 = (tmp_11_cast_fu_225_p1 + acc4_fu_201_p2);

assign acc6_fu_278_p2 = (tmp_14_cast_fu_274_p1 + tmp_13_cast_fu_271_p1);

assign acc7_fu_306_p2 = (tmp_17_cast_fu_302_p1 + acc6_fu_278_p2);

assign acc8_fu_322_p2 = (tmp_19_cast_fu_318_p1 + acc7_fu_306_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign mul_1_fu_145_p2 = (p_shl2_cast_fu_129_p1 - p_shl3_cast_fu_141_p1);

assign mul_2_fu_191_p2 = (tmp_1_cast2_fu_175_p1 + p_shl1_cast_fu_187_p1);

assign mul_3_fu_217_p3 = {{shift_reg_2}, {2'd0}};

assign mul_4_cast_fu_267_p1 = $signed(mul_4_fu_261_p2);

assign mul_4_fu_261_p2 = (p_shl_cast_fu_257_p1 - tmp_12_cast1_fu_245_p1);

assign mul_5_fu_294_p3 = {{shift_reg_0}, {1'd0}};

assign mul_fu_91_p2 = (p_shl4_cast_fu_87_p1 - tmp_2_fu_75_p1);

assign p_shl1_cast_fu_187_p1 = p_shl1_fu_179_p3;

assign p_shl1_fu_179_p3 = {{shift_reg_3}, {2'd0}};

assign p_shl2_cast_fu_129_p1 = p_shl2_fu_121_p3;

assign p_shl2_fu_121_p3 = {{shift_reg_4}, {3'd0}};

assign p_shl3_cast_fu_141_p1 = p_shl3_fu_133_p3;

assign p_shl3_fu_133_p3 = {{shift_reg_4}, {1'd0}};

assign p_shl4_cast_fu_87_p1 = p_shl4_fu_79_p3;

assign p_shl4_fu_79_p3 = {{shift_reg_5}, {3'd0}};

assign p_shl_cast_fu_257_p1 = p_shl_fu_249_p3;

assign p_shl_fu_249_p3 = {{shift_reg_1}, {2'd0}};

assign tmp_11_cast_fu_225_p1 = mul_3_fu_217_p3;

assign tmp_12_cast1_fu_245_p1 = shift_reg_1;

assign tmp_13_cast_fu_271_p1 = acc5_reg_333;

assign tmp_14_cast_fu_274_p1 = $unsigned(mul_4_cast_fu_267_p1);

assign tmp_17_cast_fu_302_p1 = mul_5_fu_294_p3;

assign tmp_19_cast_fu_318_p1 = x;

assign tmp_1_cast2_fu_175_p1 = shift_reg_3;

assign tmp_2_fu_75_p1 = shift_reg_5;

assign tmp_4_fu_97_p1 = acc1_fu_57_p3;

assign tmp_5_fu_101_p1 = mul_fu_91_p2;

assign tmp_6_cast_fu_197_p1 = mul_2_fu_191_p2;

assign tmp_9_fu_151_p1 = acc2_fu_105_p2;

assign tmp_s_fu_155_p1 = mul_1_fu_145_p2;

assign y = acc8_fu_322_p2;

endmodule //fir
