-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity svm6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    class_hw : OUT STD_LOGIC_VECTOR (15 downto 0);
    class_hw_ap_vld : OUT STD_LOGIC;
    x_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_ce1 : OUT STD_LOGIC;
    x_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of svm6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (92 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (92 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (92 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (92 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (92 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (92 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (92 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (92 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (92 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (92 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (92 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (92 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv64_C0068B43A0000000 : STD_LOGIC_VECTOR (63 downto 0) := "1100000000000110100010110100001110100000000000000000000000000000";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv64_C020000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1100000000100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv11_4C6 : STD_LOGIC_VECTOR (10 downto 0) := "10011000110";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal SupVec11_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal SupVec11_ce0 : STD_LOGIC;
    signal SupVec11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal SupVec11_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal SupVec11_ce1 : STD_LOGIC;
    signal SupVec11_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Co8_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Co8_ce0 : STD_LOGIC;
    signal Co8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_358 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal reg_363 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_316_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_342_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_393 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal i_1_fu_405_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_reg_730 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_735 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_439_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_51_reg_740 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_load_1_reg_781 : STD_LOGIC_VECTOR (31 downto 0);
    signal SupVec11_load_1_reg_786 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dif1_reg_801 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_reg_817 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_721_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_872 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal Co8_load_reg_882 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_353_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_reg_887 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_336_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_reg_892 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal sum_reg_270 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_reg_282 : STD_LOGIC_VECTOR (10 downto 0);
    signal norm_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_304 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_52_cast_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_cast_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_cast_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_cast_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_cast_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_cast_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_cast_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_cast_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_cast_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_316_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_324_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_332_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_336_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal grp_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal tmp_49_fu_415_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_50_fu_427_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_fu_435_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_cast_fu_423_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_to_int_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_449_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_34_fu_459_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_cast_fu_507_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_52_fu_511_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_521_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_cast_fu_532_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_53_fu_536_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_546_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_cast_fu_557_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_54_fu_561_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_571_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_cast_fu_582_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_55_fu_586_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_596_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_cast_fu_607_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_56_fu_611_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_621_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_cast_fu_632_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_57_fu_636_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_646_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_cast_fu_657_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_58_fu_661_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_671_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_cast_fu_682_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_59_fu_686_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_696_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_cast_fu_707_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_60_fu_711_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_316_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (92 downto 0);

    component svm_top_faddfsub_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component svm_top_fsub_32nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component svm_top_fmul_32nsdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component svm_top_fpext_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component svm_top_dadd_64nsfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component svm_top_dmul_64nsg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component svm_top_dcmp_64nshbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component svm_top_dexp_64nsibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component svm5_SupVec12 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component svm5_Co9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    SupVec11_U : component svm5_SupVec12
    generic map (
        DataWidth => 32,
        AddressRange => 21996,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SupVec11_address0,
        ce0 => SupVec11_ce0,
        q0 => SupVec11_q0,
        address1 => SupVec11_address1,
        ce1 => SupVec11_ce1,
        q1 => SupVec11_q1);

    Co8_U : component svm5_Co9
    generic map (
        DataWidth => 32,
        AddressRange => 1222,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Co8_address0,
        ce0 => Co8_ce0,
        q0 => Co8_q0);

    svm_top_faddfsub_bkb_U22 : component svm_top_faddfsub_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_316_p0,
        din1 => grp_fu_316_p1,
        opcode => grp_fu_316_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_316_p2);

    svm_top_fsub_32nscud_U23 : component svm_top_fsub_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_load_1_reg_781,
        din1 => SupVec11_load_1_reg_786,
        ce => ap_const_logic_1,
        dout => grp_fu_320_p2);

    svm_top_fmul_32nsdEe_U24 : component svm_top_fmul_32nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_324_p0,
        din1 => grp_fu_324_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_324_p2);

    svm_top_fmul_32nsdEe_U25 : component svm_top_fmul_32nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dif1_reg_801,
        din1 => dif1_reg_801,
        ce => ap_const_logic_1,
        dout => grp_fu_328_p2);

    svm_top_fpext_32neOg_U26 : component svm_top_fpext_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_332_p0,
        dout => grp_fu_332_p1);

    svm_top_dadd_64nsfYi_U27 : component svm_top_dadd_64nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_336_p0,
        din1 => grp_fu_336_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_336_p2);

    svm_top_dmul_64nsg8j_U28 : component svm_top_dmul_64nsg8j
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_358,
        din1 => grp_fu_342_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_342_p2);

    svm_top_dcmp_64nshbi_U29 : component svm_top_dcmp_64nshbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => sum_reg_270,
        din1 => ap_const_lv64_0,
        opcode => ap_const_lv5_2,
        dout => tmp_39_fu_347_p2);

    svm_top_dexp_64nsibs_U30 : component svm_top_dexp_64nsibs
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => reg_393,
        ce => ap_const_logic_1,
        dout => grp_fu_353_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond_fu_399_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
                i_reg_282 <= i_1_reg_730;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_282 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                j_reg_304 <= j_1_reg_872;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_399_p2 = ap_const_lv1_0))) then 
                j_reg_304 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    norm_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                norm_reg_293 <= grp_fu_316_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_399_p2 = ap_const_lv1_0))) then 
                norm_reg_293 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                reg_363 <= x_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_363 <= x_q0;
            end if; 
        end if;
    end process;

    sum_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
                sum_reg_270 <= grp_fu_336_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_reg_270 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                Co8_load_reg_882 <= Co8_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                SupVec11_load_1_reg_786 <= SupVec11_q1;
                x_load_1_reg_781 <= x_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                dif1_reg_801 <= grp_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_730 <= i_1_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                j_1_reg_872 <= j_1_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                mul1_reg_817 <= grp_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state77) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_496_p2 = ap_const_lv1_0)))) then
                reg_358 <= grp_fu_332_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_369 <= SupVec11_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_374 <= grp_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_381 <= grp_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_387 <= grp_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state59))) then
                reg_393 <= grp_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_399_p2 = ap_const_lv1_0))) then
                    tmp_1_reg_735(10 downto 0) <= tmp_1_fu_411_p1(10 downto 0);
                    tmp_51_reg_740(15 downto 1) <= tmp_51_fu_439_p2(15 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                tmp_29_reg_887 <= grp_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state88)) then
                tmp_31_reg_892 <= grp_fu_336_p2;
            end if;
        end if;
    end process;
    tmp_1_reg_735(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    tmp_51_reg_740(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, tmp_2_fu_496_p2, ap_CS_fsm_state2, exitcond_fu_399_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_399_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_496_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Co8_address0 <= tmp_1_reg_735(11 - 1 downto 0);

    Co8_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Co8_ce0 <= ap_const_logic_1;
        else 
            Co8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SupVec11_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state13, ap_CS_fsm_state8, tmp_52_cast_fu_516_p1, tmp_54_cast_fu_566_p1, tmp_55_cast_fu_591_p1, tmp_56_cast_fu_616_p1, tmp_57_cast_fu_641_p1, tmp_58_cast_fu_666_p1, tmp_59_cast_fu_691_p1, tmp_60_cast_fu_716_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            SupVec11_address0 <= tmp_60_cast_fu_716_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            SupVec11_address0 <= tmp_59_cast_fu_691_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            SupVec11_address0 <= tmp_58_cast_fu_666_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            SupVec11_address0 <= tmp_57_cast_fu_641_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            SupVec11_address0 <= tmp_56_cast_fu_616_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            SupVec11_address0 <= tmp_55_cast_fu_591_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            SupVec11_address0 <= tmp_54_cast_fu_566_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            SupVec11_address0 <= tmp_52_cast_fu_516_p1(15 - 1 downto 0);
        else 
            SupVec11_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;

    SupVec11_address1 <= tmp_53_cast_fu_541_p1(15 - 1 downto 0);

    SupVec11_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state13, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            SupVec11_ce0 <= ap_const_logic_1;
        else 
            SupVec11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SupVec11_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            SupVec11_ce1 <= ap_const_logic_1;
        else 
            SupVec11_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, exitcond_fu_399_p2)
    begin
        if (((exitcond_fu_399_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_399_p2)
    begin
        if (((exitcond_fu_399_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    class_hw <= 
        ap_const_lv16_1 when (tmp_40_fu_481_p2(0) = '1') else 
        ap_const_lv16_FFFF;

    class_hw_ap_vld_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_399_p2)
    begin
        if (((exitcond_fu_399_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            class_hw_ap_vld <= ap_const_logic_1;
        else 
            class_hw_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_399_p2 <= "1" when (i_reg_282 = ap_const_lv11_4C6) else "0";

    grp_fu_316_opcode_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state24, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state39, ap_CS_fsm_state44, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_316_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_316_opcode <= ap_const_lv2_0;
        else 
            grp_fu_316_opcode <= "XX";
        end if; 
    end process;


    grp_fu_316_p0_assign_proc : process(reg_363, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state24, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state39, reg_374, reg_381, ap_CS_fsm_state44, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_316_p0 <= reg_374;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_316_p0 <= reg_381;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_316_p0 <= reg_363;
        else 
            grp_fu_316_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_316_p1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state24, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state39, reg_369, reg_381, ap_CS_fsm_state44, mul1_reg_817, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_316_p1 <= reg_381;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_316_p1 <= mul1_reg_817;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_316_p1 <= reg_369;
        else 
            grp_fu_316_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_324_p0_assign_proc : process(reg_374, reg_387, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_324_p0 <= reg_387;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_324_p0 <= reg_374;
        else 
            grp_fu_324_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_324_p1_assign_proc : process(reg_374, reg_387, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_324_p1 <= reg_387;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_324_p1 <= reg_374;
        else 
            grp_fu_324_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_332_p0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state77, Co8_load_reg_882, norm_reg_293)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            grp_fu_332_p0 <= Co8_load_reg_882;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_332_p0 <= norm_reg_293;
        else 
            grp_fu_332_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_336_p0_assign_proc : process(reg_393, sum_reg_270, ap_CS_fsm_state84, ap_CS_fsm_state89)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_fu_336_p0 <= sum_reg_270;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_fu_336_p0 <= reg_393;
        else 
            grp_fu_336_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_336_p1_assign_proc : process(tmp_31_reg_892, ap_CS_fsm_state84, ap_CS_fsm_state89)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_fu_336_p1 <= tmp_31_reg_892;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_fu_336_p1 <= ap_const_lv64_C0068B43A0000000;
        else 
            grp_fu_336_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_342_p1_assign_proc : process(ap_CS_fsm_state54, tmp_29_reg_887, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            grp_fu_342_p1 <= tmp_29_reg_887;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_342_p1 <= ap_const_lv64_C020000000000000;
        else 
            grp_fu_342_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_405_p2 <= std_logic_vector(unsigned(i_reg_282) + unsigned(ap_const_lv11_1));
    j_1_fu_721_p2 <= std_logic_vector(unsigned(j_reg_304) + unsigned(ap_const_lv5_9));
    notlhs_fu_463_p2 <= "0" when (tmp_fu_449_p4 = ap_const_lv11_7FF) else "1";
    notrhs_fu_469_p2 <= "1" when (tmp_34_fu_459_p1 = ap_const_lv52_0) else "0";
    p_shl1_cast_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_427_p3),16));
    p_shl_cast_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_415_p3),16));
    sum_to_int_fu_445_p1 <= sum_reg_270;
    tmp_10_cast_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_596_p2),16));
    tmp_10_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_596_p2),64));
    tmp_11_fu_621_p2 <= std_logic_vector(unsigned(j_reg_304) + unsigned(ap_const_lv5_5));
    tmp_12_cast_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_621_p2),16));
    tmp_12_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_621_p2),64));
    tmp_13_fu_646_p2 <= std_logic_vector(unsigned(j_reg_304) + unsigned(ap_const_lv5_6));
    tmp_14_cast_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_646_p2),16));
    tmp_14_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_646_p2),64));
    tmp_15_fu_671_p2 <= std_logic_vector(unsigned(j_reg_304) + unsigned(ap_const_lv5_7));
    tmp_16_cast_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_671_p2),16));
    tmp_16_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_671_p2),64));
    tmp_17_fu_696_p2 <= std_logic_vector(unsigned(j_reg_304) + unsigned(ap_const_lv5_8));
    tmp_18_cast_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_696_p2),16));
    tmp_18_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_696_p2),64));
    tmp_1_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_282),64));
    tmp_2_fu_496_p2 <= "1" when (unsigned(j_reg_304) < unsigned(ap_const_lv5_12)) else "0";
    tmp_34_fu_459_p1 <= sum_to_int_fu_445_p1(52 - 1 downto 0);
    tmp_38_fu_475_p2 <= (notrhs_fu_469_p2 or notlhs_fu_463_p2);
    tmp_3_cast_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_304),16));
    tmp_3_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_304),64));
    tmp_40_fu_481_p2 <= (tmp_39_fu_347_p2 and tmp_38_fu_475_p2);
    tmp_49_fu_415_p3 <= (i_reg_282 & ap_const_lv4_0);
    tmp_4_fu_521_p2 <= std_logic_vector(unsigned(j_reg_304) + unsigned(ap_const_lv5_1));
    tmp_50_fu_427_p3 <= (i_reg_282 & ap_const_lv1_0);
    tmp_51_fu_439_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_435_p1) + unsigned(p_shl_cast_fu_423_p1));
    tmp_52_cast_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_511_p2),64));
    tmp_52_fu_511_p2 <= std_logic_vector(unsigned(tmp_51_reg_740) + unsigned(tmp_3_cast_fu_507_p1));
    tmp_53_cast_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_536_p2),64));
    tmp_53_fu_536_p2 <= std_logic_vector(unsigned(tmp_51_reg_740) + unsigned(tmp_5_cast_fu_532_p1));
    tmp_54_cast_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_561_p2),64));
    tmp_54_fu_561_p2 <= std_logic_vector(unsigned(tmp_51_reg_740) + unsigned(tmp_7_cast_fu_557_p1));
    tmp_55_cast_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_586_p2),64));
    tmp_55_fu_586_p2 <= std_logic_vector(unsigned(tmp_51_reg_740) + unsigned(tmp_9_cast_fu_582_p1));
    tmp_56_cast_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_611_p2),64));
    tmp_56_fu_611_p2 <= std_logic_vector(unsigned(tmp_51_reg_740) + unsigned(tmp_10_cast_fu_607_p1));
    tmp_57_cast_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_636_p2),64));
    tmp_57_fu_636_p2 <= std_logic_vector(unsigned(tmp_51_reg_740) + unsigned(tmp_12_cast_fu_632_p1));
    tmp_58_cast_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_661_p2),64));
    tmp_58_fu_661_p2 <= std_logic_vector(unsigned(tmp_51_reg_740) + unsigned(tmp_14_cast_fu_657_p1));
    tmp_59_cast_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_686_p2),64));
    tmp_59_fu_686_p2 <= std_logic_vector(unsigned(tmp_51_reg_740) + unsigned(tmp_16_cast_fu_682_p1));
    tmp_5_cast_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_521_p2),16));
    tmp_5_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_521_p2),64));
    tmp_60_cast_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_711_p2),64));
    tmp_60_fu_711_p2 <= std_logic_vector(unsigned(tmp_51_reg_740) + unsigned(tmp_18_cast_fu_707_p1));
    tmp_6_fu_546_p2 <= std_logic_vector(unsigned(j_reg_304) + unsigned(ap_const_lv5_2));
    tmp_7_cast_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_546_p2),16));
    tmp_7_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_546_p2),64));
    tmp_8_fu_571_p2 <= std_logic_vector(unsigned(j_reg_304) + unsigned(ap_const_lv5_3));
    tmp_9_cast_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_571_p2),16));
    tmp_9_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_571_p2),64));
    tmp_fu_449_p4 <= sum_to_int_fu_445_p1(62 downto 52);
    tmp_s_fu_596_p2 <= std_logic_vector(unsigned(j_reg_304) + unsigned(ap_const_lv5_4));

    x_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state28, ap_CS_fsm_state38, ap_CS_fsm_state8, tmp_3_fu_502_p1, tmp_7_fu_552_p1, tmp_10_fu_602_p1, tmp_14_fu_652_p1, tmp_18_fu_702_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            x_address0 <= tmp_18_fu_702_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            x_address0 <= tmp_14_fu_652_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            x_address0 <= tmp_10_fu_602_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_address0 <= tmp_7_fu_552_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_address0 <= tmp_3_fu_502_p1(5 - 1 downto 0);
        else 
            x_address0 <= "XXXXX";
        end if; 
    end process;


    x_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state23, ap_CS_fsm_state33, ap_CS_fsm_state13, tmp_5_fu_527_p1, tmp_9_fu_577_p1, tmp_12_fu_627_p1, tmp_16_fu_677_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            x_address1 <= tmp_16_fu_677_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            x_address1 <= tmp_12_fu_627_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x_address1 <= tmp_9_fu_577_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_address1 <= tmp_5_fu_527_p1(5 - 1 downto 0);
        else 
            x_address1 <= "XXXXX";
        end if; 
    end process;


    x_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state28, ap_CS_fsm_state38, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state23, ap_CS_fsm_state33, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            x_ce1 <= ap_const_logic_1;
        else 
            x_ce1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
