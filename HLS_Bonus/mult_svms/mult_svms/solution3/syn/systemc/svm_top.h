// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _svm_top_HH_
#define _svm_top_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "svm5.h"
#include "svm6.h"
#include "svm7.h"
#include "svm.h"

namespace ap_rtl {

struct svm_top : public sc_module {
    // Port declarations 54
    sc_out< sc_lv<16> > class_hw0;
    sc_out< sc_lv<16> > class_hw1;
    sc_out< sc_lv<16> > class_hw2;
    sc_out< sc_lv<16> > class_hw3;
    sc_out< sc_lv<5> > x0_address0;
    sc_out< sc_logic > x0_ce0;
    sc_out< sc_lv<32> > x0_d0;
    sc_in< sc_lv<32> > x0_q0;
    sc_out< sc_logic > x0_we0;
    sc_out< sc_lv<5> > x0_address1;
    sc_out< sc_logic > x0_ce1;
    sc_out< sc_lv<32> > x0_d1;
    sc_in< sc_lv<32> > x0_q1;
    sc_out< sc_logic > x0_we1;
    sc_out< sc_lv<5> > x1_address0;
    sc_out< sc_logic > x1_ce0;
    sc_out< sc_lv<32> > x1_d0;
    sc_in< sc_lv<32> > x1_q0;
    sc_out< sc_logic > x1_we0;
    sc_out< sc_lv<5> > x1_address1;
    sc_out< sc_logic > x1_ce1;
    sc_out< sc_lv<32> > x1_d1;
    sc_in< sc_lv<32> > x1_q1;
    sc_out< sc_logic > x1_we1;
    sc_out< sc_lv<5> > x2_address0;
    sc_out< sc_logic > x2_ce0;
    sc_out< sc_lv<32> > x2_d0;
    sc_in< sc_lv<32> > x2_q0;
    sc_out< sc_logic > x2_we0;
    sc_out< sc_lv<5> > x2_address1;
    sc_out< sc_logic > x2_ce1;
    sc_out< sc_lv<32> > x2_d1;
    sc_in< sc_lv<32> > x2_q1;
    sc_out< sc_logic > x2_we1;
    sc_out< sc_lv<5> > x3_address0;
    sc_out< sc_logic > x3_ce0;
    sc_out< sc_lv<32> > x3_d0;
    sc_in< sc_lv<32> > x3_q0;
    sc_out< sc_logic > x3_we0;
    sc_out< sc_lv<5> > x3_address1;
    sc_out< sc_logic > x3_ce1;
    sc_out< sc_lv<32> > x3_d1;
    sc_in< sc_lv<32> > x3_q1;
    sc_out< sc_logic > x3_we1;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_logic > class_hw0_ap_vld;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > class_hw1_ap_vld;
    sc_out< sc_logic > class_hw2_ap_vld;
    sc_out< sc_logic > class_hw3_ap_vld;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;


    // Module declarations
    svm_top(sc_module_name name);
    SC_HAS_PROCESS(svm_top);

    ~svm_top();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    svm5* svm5_U0;
    svm6* svm6_U0;
    svm7* svm7_U0;
    svm* svm_U0;
    sc_signal< sc_logic > svm5_U0_ap_start;
    sc_signal< sc_logic > svm5_U0_ap_done;
    sc_signal< sc_logic > svm5_U0_ap_continue;
    sc_signal< sc_logic > svm5_U0_ap_idle;
    sc_signal< sc_logic > svm5_U0_ap_ready;
    sc_signal< sc_lv<16> > svm5_U0_class_hw;
    sc_signal< sc_logic > svm5_U0_class_hw_ap_vld;
    sc_signal< sc_lv<5> > svm5_U0_x_address0;
    sc_signal< sc_logic > svm5_U0_x_ce0;
    sc_signal< sc_lv<5> > svm5_U0_x_address1;
    sc_signal< sc_logic > svm5_U0_x_ce1;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > svm6_U0_ap_start;
    sc_signal< sc_logic > svm6_U0_ap_done;
    sc_signal< sc_logic > svm6_U0_ap_continue;
    sc_signal< sc_logic > svm6_U0_ap_idle;
    sc_signal< sc_logic > svm6_U0_ap_ready;
    sc_signal< sc_lv<16> > svm6_U0_class_hw;
    sc_signal< sc_logic > svm6_U0_class_hw_ap_vld;
    sc_signal< sc_lv<5> > svm6_U0_x_address0;
    sc_signal< sc_logic > svm6_U0_x_ce0;
    sc_signal< sc_lv<5> > svm6_U0_x_address1;
    sc_signal< sc_logic > svm6_U0_x_ce1;
    sc_signal< sc_logic > svm7_U0_ap_start;
    sc_signal< sc_logic > svm7_U0_ap_done;
    sc_signal< sc_logic > svm7_U0_ap_continue;
    sc_signal< sc_logic > svm7_U0_ap_idle;
    sc_signal< sc_logic > svm7_U0_ap_ready;
    sc_signal< sc_lv<16> > svm7_U0_class_hw;
    sc_signal< sc_logic > svm7_U0_class_hw_ap_vld;
    sc_signal< sc_lv<5> > svm7_U0_x_address0;
    sc_signal< sc_logic > svm7_U0_x_ce0;
    sc_signal< sc_lv<5> > svm7_U0_x_address1;
    sc_signal< sc_logic > svm7_U0_x_ce1;
    sc_signal< sc_logic > svm_U0_ap_start;
    sc_signal< sc_logic > svm_U0_ap_done;
    sc_signal< sc_logic > svm_U0_ap_continue;
    sc_signal< sc_logic > svm_U0_ap_idle;
    sc_signal< sc_logic > svm_U0_ap_ready;
    sc_signal< sc_lv<16> > svm_U0_class_hw;
    sc_signal< sc_logic > svm_U0_class_hw_ap_vld;
    sc_signal< sc_lv<5> > svm_U0_x_address0;
    sc_signal< sc_logic > svm_U0_x_ce0;
    sc_signal< sc_lv<5> > svm_U0_x_address1;
    sc_signal< sc_logic > svm_U0_x_ce1;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > ap_sync_reg_svm5_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_svm5_U0_ap_ready;
    sc_signal< sc_lv<2> > svm5_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_svm6_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_svm6_U0_ap_ready;
    sc_signal< sc_lv<2> > svm6_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_svm7_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_svm7_U0_ap_ready;
    sc_signal< sc_lv<2> > svm7_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_svm_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_svm_U0_ap_ready;
    sc_signal< sc_lv<2> > svm_U0_ap_ready_count;
    sc_signal< sc_logic > svm5_U0_start_full_n;
    sc_signal< sc_logic > svm5_U0_start_write;
    sc_signal< sc_logic > svm6_U0_start_full_n;
    sc_signal< sc_logic > svm6_U0_start_write;
    sc_signal< sc_logic > svm7_U0_start_full_n;
    sc_signal< sc_logic > svm7_U0_start_write;
    sc_signal< sc_logic > svm_U0_start_full_n;
    sc_signal< sc_logic > svm_U0_start_write;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_ap_sync_svm5_U0_ap_ready();
    void thread_ap_sync_svm6_U0_ap_ready();
    void thread_ap_sync_svm7_U0_ap_ready();
    void thread_ap_sync_svm_U0_ap_ready();
    void thread_class_hw0();
    void thread_class_hw0_ap_vld();
    void thread_class_hw1();
    void thread_class_hw1_ap_vld();
    void thread_class_hw2();
    void thread_class_hw2_ap_vld();
    void thread_class_hw3();
    void thread_class_hw3_ap_vld();
    void thread_svm5_U0_ap_continue();
    void thread_svm5_U0_ap_start();
    void thread_svm5_U0_start_full_n();
    void thread_svm5_U0_start_write();
    void thread_svm6_U0_ap_continue();
    void thread_svm6_U0_ap_start();
    void thread_svm6_U0_start_full_n();
    void thread_svm6_U0_start_write();
    void thread_svm7_U0_ap_continue();
    void thread_svm7_U0_ap_start();
    void thread_svm7_U0_start_full_n();
    void thread_svm7_U0_start_write();
    void thread_svm_U0_ap_continue();
    void thread_svm_U0_ap_start();
    void thread_svm_U0_start_full_n();
    void thread_svm_U0_start_write();
    void thread_x0_address0();
    void thread_x0_address1();
    void thread_x0_ce0();
    void thread_x0_ce1();
    void thread_x0_d0();
    void thread_x0_d1();
    void thread_x0_we0();
    void thread_x0_we1();
    void thread_x1_address0();
    void thread_x1_address1();
    void thread_x1_ce0();
    void thread_x1_ce1();
    void thread_x1_d0();
    void thread_x1_d1();
    void thread_x1_we0();
    void thread_x1_we1();
    void thread_x2_address0();
    void thread_x2_address1();
    void thread_x2_ce0();
    void thread_x2_ce1();
    void thread_x2_d0();
    void thread_x2_d1();
    void thread_x2_we0();
    void thread_x2_we1();
    void thread_x3_address0();
    void thread_x3_address1();
    void thread_x3_ce0();
    void thread_x3_ce1();
    void thread_x3_d0();
    void thread_x3_d1();
    void thread_x3_we0();
    void thread_x3_we1();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
