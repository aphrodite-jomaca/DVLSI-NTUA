// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module svm5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        class_hw,
        class_hw_ap_vld,
        x_address0,
        x_ce0,
        x_q0,
        x_address1,
        x_ce1,
        x_q1
);

parameter    ap_ST_fsm_state1 = 93'd1;
parameter    ap_ST_fsm_state2 = 93'd2;
parameter    ap_ST_fsm_state3 = 93'd4;
parameter    ap_ST_fsm_state4 = 93'd8;
parameter    ap_ST_fsm_state5 = 93'd16;
parameter    ap_ST_fsm_state6 = 93'd32;
parameter    ap_ST_fsm_state7 = 93'd64;
parameter    ap_ST_fsm_state8 = 93'd128;
parameter    ap_ST_fsm_state9 = 93'd256;
parameter    ap_ST_fsm_state10 = 93'd512;
parameter    ap_ST_fsm_state11 = 93'd1024;
parameter    ap_ST_fsm_state12 = 93'd2048;
parameter    ap_ST_fsm_state13 = 93'd4096;
parameter    ap_ST_fsm_state14 = 93'd8192;
parameter    ap_ST_fsm_state15 = 93'd16384;
parameter    ap_ST_fsm_state16 = 93'd32768;
parameter    ap_ST_fsm_state17 = 93'd65536;
parameter    ap_ST_fsm_state18 = 93'd131072;
parameter    ap_ST_fsm_state19 = 93'd262144;
parameter    ap_ST_fsm_state20 = 93'd524288;
parameter    ap_ST_fsm_state21 = 93'd1048576;
parameter    ap_ST_fsm_state22 = 93'd2097152;
parameter    ap_ST_fsm_state23 = 93'd4194304;
parameter    ap_ST_fsm_state24 = 93'd8388608;
parameter    ap_ST_fsm_state25 = 93'd16777216;
parameter    ap_ST_fsm_state26 = 93'd33554432;
parameter    ap_ST_fsm_state27 = 93'd67108864;
parameter    ap_ST_fsm_state28 = 93'd134217728;
parameter    ap_ST_fsm_state29 = 93'd268435456;
parameter    ap_ST_fsm_state30 = 93'd536870912;
parameter    ap_ST_fsm_state31 = 93'd1073741824;
parameter    ap_ST_fsm_state32 = 93'd2147483648;
parameter    ap_ST_fsm_state33 = 93'd4294967296;
parameter    ap_ST_fsm_state34 = 93'd8589934592;
parameter    ap_ST_fsm_state35 = 93'd17179869184;
parameter    ap_ST_fsm_state36 = 93'd34359738368;
parameter    ap_ST_fsm_state37 = 93'd68719476736;
parameter    ap_ST_fsm_state38 = 93'd137438953472;
parameter    ap_ST_fsm_state39 = 93'd274877906944;
parameter    ap_ST_fsm_state40 = 93'd549755813888;
parameter    ap_ST_fsm_state41 = 93'd1099511627776;
parameter    ap_ST_fsm_state42 = 93'd2199023255552;
parameter    ap_ST_fsm_state43 = 93'd4398046511104;
parameter    ap_ST_fsm_state44 = 93'd8796093022208;
parameter    ap_ST_fsm_state45 = 93'd17592186044416;
parameter    ap_ST_fsm_state46 = 93'd35184372088832;
parameter    ap_ST_fsm_state47 = 93'd70368744177664;
parameter    ap_ST_fsm_state48 = 93'd140737488355328;
parameter    ap_ST_fsm_state49 = 93'd281474976710656;
parameter    ap_ST_fsm_state50 = 93'd562949953421312;
parameter    ap_ST_fsm_state51 = 93'd1125899906842624;
parameter    ap_ST_fsm_state52 = 93'd2251799813685248;
parameter    ap_ST_fsm_state53 = 93'd4503599627370496;
parameter    ap_ST_fsm_state54 = 93'd9007199254740992;
parameter    ap_ST_fsm_state55 = 93'd18014398509481984;
parameter    ap_ST_fsm_state56 = 93'd36028797018963968;
parameter    ap_ST_fsm_state57 = 93'd72057594037927936;
parameter    ap_ST_fsm_state58 = 93'd144115188075855872;
parameter    ap_ST_fsm_state59 = 93'd288230376151711744;
parameter    ap_ST_fsm_state60 = 93'd576460752303423488;
parameter    ap_ST_fsm_state61 = 93'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 93'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 93'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 93'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 93'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 93'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 93'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 93'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 93'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 93'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 93'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 93'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 93'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 93'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 93'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 93'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 93'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 93'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 93'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 93'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 93'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 93'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 93'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 93'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 93'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 93'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 93'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 93'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 93'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 93'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 93'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 93'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 93'd4951760157141521099596496896;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [15:0] class_hw;
output   class_hw_ap_vld;
output  [4:0] x_address0;
output   x_ce0;
input  [31:0] x_q0;
output  [4:0] x_address1;
output   x_ce1;
input  [31:0] x_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg class_hw_ap_vld;
reg[4:0] x_address0;
reg x_ce0;
reg[4:0] x_address1;
reg x_ce1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [92:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [14:0] SupVec12_address0;
reg    SupVec12_ce0;
wire   [31:0] SupVec12_q0;
wire   [14:0] SupVec12_address1;
reg    SupVec12_ce1;
wire   [31:0] SupVec12_q1;
wire   [10:0] Co9_address0;
reg    Co9_ce0;
wire   [31:0] Co9_q0;
wire   [63:0] grp_fu_332_p1;
reg   [63:0] reg_358;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_2_fu_496_p2;
wire    ap_CS_fsm_state77;
reg   [31:0] reg_363;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state39;
reg   [31:0] reg_369;
wire   [31:0] grp_fu_316_p2;
reg   [31:0] reg_374;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state48;
wire   [31:0] grp_fu_324_p2;
reg   [31:0] reg_381;
wire    ap_CS_fsm_state13;
reg   [31:0] reg_387;
wire    ap_CS_fsm_state44;
wire   [63:0] grp_fu_342_p2;
reg   [63:0] reg_393;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state83;
wire   [10:0] i_1_fu_405_p2;
reg   [10:0] i_1_reg_730;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_1_fu_411_p1;
reg   [63:0] tmp_1_reg_735;
wire   [0:0] exitcond_fu_399_p2;
wire   [15:0] tmp_63_fu_439_p2;
reg   [15:0] tmp_63_reg_740;
reg   [31:0] x_load_1_reg_781;
reg   [31:0] SupVec12_load_1_reg_786;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_320_p2;
reg   [31:0] dif1_reg_801;
wire   [31:0] grp_fu_328_p2;
reg   [31:0] mul1_reg_817;
wire   [4:0] j_1_fu_721_p2;
reg   [4:0] j_1_reg_872;
wire    ap_CS_fsm_state53;
reg   [31:0] Co9_load_reg_882;
wire    ap_CS_fsm_state54;
wire   [63:0] grp_fu_353_p2;
reg   [63:0] tmp_29_reg_887;
wire   [63:0] grp_fu_336_p2;
reg   [63:0] tmp_31_reg_892;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state93;
reg   [63:0] sum_reg_270;
reg    ap_block_state1;
reg   [10:0] i_reg_282;
reg   [31:0] norm_reg_293;
reg   [4:0] j_reg_304;
wire   [63:0] tmp_64_cast_fu_516_p1;
wire   [63:0] tmp_3_fu_502_p1;
wire   [63:0] tmp_65_cast_fu_541_p1;
wire   [63:0] tmp_5_fu_527_p1;
wire   [63:0] tmp_66_cast_fu_566_p1;
wire   [63:0] tmp_7_fu_552_p1;
wire   [63:0] tmp_67_cast_fu_591_p1;
wire   [63:0] tmp_9_fu_577_p1;
wire   [63:0] tmp_68_cast_fu_616_p1;
wire   [63:0] tmp_10_fu_602_p1;
wire   [63:0] tmp_69_cast_fu_641_p1;
wire   [63:0] tmp_12_fu_627_p1;
wire   [63:0] tmp_70_cast_fu_666_p1;
wire   [63:0] tmp_14_fu_652_p1;
wire   [63:0] tmp_71_cast_fu_691_p1;
wire   [63:0] tmp_16_fu_677_p1;
wire   [63:0] tmp_72_cast_fu_716_p1;
wire   [63:0] tmp_18_fu_702_p1;
reg   [31:0] grp_fu_316_p0;
reg   [31:0] grp_fu_316_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state49;
reg   [31:0] grp_fu_324_p0;
reg   [31:0] grp_fu_324_p1;
wire    ap_CS_fsm_state45;
reg   [31:0] grp_fu_332_p0;
reg   [63:0] grp_fu_336_p0;
reg   [63:0] grp_fu_336_p1;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state89;
reg   [63:0] grp_fu_342_p1;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state60;
wire   [14:0] tmp_61_fu_415_p3;
wire   [11:0] tmp_62_fu_427_p3;
wire   [15:0] p_shl1_cast_fu_435_p1;
wire   [15:0] p_shl_cast_fu_423_p1;
wire   [63:0] sum_to_int_fu_445_p1;
wire   [10:0] tmp_fu_449_p4;
wire   [51:0] tmp_35_fu_459_p1;
wire   [0:0] notrhs_fu_469_p2;
wire   [0:0] notlhs_fu_463_p2;
wire   [0:0] tmp_42_fu_475_p2;
wire   [0:0] tmp_43_fu_347_p2;
wire   [0:0] tmp_44_fu_481_p2;
wire   [15:0] tmp_3_cast_fu_507_p1;
wire   [15:0] tmp_64_fu_511_p2;
wire   [4:0] tmp_4_fu_521_p2;
wire   [15:0] tmp_5_cast_fu_532_p1;
wire   [15:0] tmp_65_fu_536_p2;
wire   [4:0] tmp_6_fu_546_p2;
wire   [15:0] tmp_7_cast_fu_557_p1;
wire   [15:0] tmp_66_fu_561_p2;
wire   [4:0] tmp_8_fu_571_p2;
wire   [15:0] tmp_9_cast_fu_582_p1;
wire   [15:0] tmp_67_fu_586_p2;
wire   [4:0] tmp_s_fu_596_p2;
wire   [15:0] tmp_10_cast_fu_607_p1;
wire   [15:0] tmp_68_fu_611_p2;
wire   [4:0] tmp_11_fu_621_p2;
wire   [15:0] tmp_12_cast_fu_632_p1;
wire   [15:0] tmp_69_fu_636_p2;
wire   [4:0] tmp_13_fu_646_p2;
wire   [15:0] tmp_14_cast_fu_657_p1;
wire   [15:0] tmp_70_fu_661_p2;
wire   [4:0] tmp_15_fu_671_p2;
wire   [15:0] tmp_16_cast_fu_682_p1;
wire   [15:0] tmp_71_fu_686_p2;
wire   [4:0] tmp_17_fu_696_p2;
wire   [15:0] tmp_18_cast_fu_707_p1;
wire   [15:0] tmp_72_fu_711_p2;
reg   [1:0] grp_fu_316_opcode;
reg   [92:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 93'd1;
end

svm5_SupVec12 #(
    .DataWidth( 32 ),
    .AddressRange( 21996 ),
    .AddressWidth( 15 ))
SupVec12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SupVec12_address0),
    .ce0(SupVec12_ce0),
    .q0(SupVec12_q0),
    .address1(SupVec12_address1),
    .ce1(SupVec12_ce1),
    .q1(SupVec12_q1)
);

svm5_Co9 #(
    .DataWidth( 32 ),
    .AddressRange( 1222 ),
    .AddressWidth( 11 ))
Co9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Co9_address0),
    .ce0(Co9_ce0),
    .q0(Co9_q0)
);

svm_top_faddfsub_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
svm_top_faddfsub_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_316_p0),
    .din1(grp_fu_316_p1),
    .opcode(grp_fu_316_opcode),
    .ce(1'b1),
    .dout(grp_fu_316_p2)
);

svm_top_fsub_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
svm_top_fsub_32nscud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_load_1_reg_781),
    .din1(SupVec12_load_1_reg_786),
    .ce(1'b1),
    .dout(grp_fu_320_p2)
);

svm_top_fmul_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
svm_top_fmul_32nsdEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_324_p0),
    .din1(grp_fu_324_p1),
    .ce(1'b1),
    .dout(grp_fu_324_p2)
);

svm_top_fmul_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
svm_top_fmul_32nsdEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dif1_reg_801),
    .din1(dif1_reg_801),
    .ce(1'b1),
    .dout(grp_fu_328_p2)
);

svm_top_fpext_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
svm_top_fpext_32neOg_U5(
    .din0(grp_fu_332_p0),
    .dout(grp_fu_332_p1)
);

svm_top_dadd_64nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
svm_top_dadd_64nsfYi_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_336_p0),
    .din1(grp_fu_336_p1),
    .ce(1'b1),
    .dout(grp_fu_336_p2)
);

svm_top_dmul_64nsg8j #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
svm_top_dmul_64nsg8j_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_358),
    .din1(grp_fu_342_p1),
    .ce(1'b1),
    .dout(grp_fu_342_p2)
);

svm_top_dcmp_64nshbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
svm_top_dcmp_64nshbi_U8(
    .din0(sum_reg_270),
    .din1(64'd0),
    .opcode(5'd2),
    .dout(tmp_43_fu_347_p2)
);

svm_top_dexp_64nsibs #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
svm_top_dexp_64nsibs_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(reg_393),
    .ce(1'b1),
    .dout(grp_fu_353_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        i_reg_282 <= i_1_reg_730;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_282 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        j_reg_304 <= j_1_reg_872;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_399_p2 == 1'd0))) begin
        j_reg_304 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        norm_reg_293 <= grp_fu_316_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_399_p2 == 1'd0))) begin
        norm_reg_293 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_363 <= x_q1;
    end else if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_363 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        sum_reg_270 <= grp_fu_336_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_reg_270 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        Co9_load_reg_882 <= Co9_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        SupVec12_load_1_reg_786 <= SupVec12_q1;
        x_load_1_reg_781 <= x_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        dif1_reg_801 <= grp_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_730 <= i_1_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        j_1_reg_872 <= j_1_fu_721_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mul1_reg_817 <= grp_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state77) | ((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_496_p2 == 1'd0)))) begin
        reg_358 <= grp_fu_332_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_369 <= SupVec12_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_374 <= grp_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_381 <= grp_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_387 <= grp_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state59))) begin
        reg_393 <= grp_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_399_p2 == 1'd0))) begin
        tmp_1_reg_735[10 : 0] <= tmp_1_fu_411_p1[10 : 0];
        tmp_63_reg_740[15 : 1] <= tmp_63_fu_439_p2[15 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        tmp_29_reg_887 <= grp_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        tmp_31_reg_892 <= grp_fu_336_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Co9_ce0 = 1'b1;
    end else begin
        Co9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        SupVec12_address0 = tmp_72_cast_fu_716_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        SupVec12_address0 = tmp_71_cast_fu_691_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        SupVec12_address0 = tmp_70_cast_fu_666_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        SupVec12_address0 = tmp_69_cast_fu_641_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        SupVec12_address0 = tmp_68_cast_fu_616_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        SupVec12_address0 = tmp_67_cast_fu_591_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        SupVec12_address0 = tmp_66_cast_fu_566_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        SupVec12_address0 = tmp_64_cast_fu_516_p1;
    end else begin
        SupVec12_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state3))) begin
        SupVec12_ce0 = 1'b1;
    end else begin
        SupVec12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        SupVec12_ce1 = 1'b1;
    end else begin
        SupVec12_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        class_hw_ap_vld = 1'b1;
    end else begin
        class_hw_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_316_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_fu_316_opcode = 2'd0;
    end else begin
        grp_fu_316_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_316_p0 = reg_374;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_316_p0 = reg_381;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_316_p0 = reg_363;
    end else begin
        grp_fu_316_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_316_p1 = reg_381;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_316_p1 = mul1_reg_817;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_316_p1 = reg_369;
    end else begin
        grp_fu_316_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20))) begin
        grp_fu_324_p0 = reg_387;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_324_p0 = reg_374;
    end else begin
        grp_fu_324_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20))) begin
        grp_fu_324_p1 = reg_387;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_324_p1 = reg_374;
    end else begin
        grp_fu_324_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        grp_fu_332_p0 = Co9_load_reg_882;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_332_p0 = norm_reg_293;
    end else begin
        grp_fu_332_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        grp_fu_336_p0 = sum_reg_270;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        grp_fu_336_p0 = reg_393;
    end else begin
        grp_fu_336_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        grp_fu_336_p1 = tmp_31_reg_892;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        grp_fu_336_p1 = 64'd13836900027705851904;
    end else begin
        grp_fu_336_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_342_p1 = tmp_29_reg_887;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_342_p1 = 64'd13844065254536904704;
    end else begin
        grp_fu_342_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        x_address0 = tmp_18_fu_702_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        x_address0 = tmp_14_fu_652_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        x_address0 = tmp_10_fu_602_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        x_address0 = tmp_7_fu_552_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_address0 = tmp_3_fu_502_p1;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        x_address1 = tmp_16_fu_677_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        x_address1 = tmp_12_fu_627_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        x_address1 = tmp_9_fu_577_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_address1 = tmp_5_fu_527_p1;
    end else begin
        x_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state3))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state3))) begin
        x_ce1 = 1'b1;
    end else begin
        x_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_496_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Co9_address0 = tmp_1_reg_735;

assign SupVec12_address1 = tmp_65_cast_fu_541_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign class_hw = ((tmp_44_fu_481_p2[0:0] === 1'b1) ? 16'd1 : 16'd65535);

assign exitcond_fu_399_p2 = ((i_reg_282 == 11'd1222) ? 1'b1 : 1'b0);

assign i_1_fu_405_p2 = (i_reg_282 + 11'd1);

assign j_1_fu_721_p2 = (j_reg_304 + 5'd9);

assign notlhs_fu_463_p2 = ((tmp_fu_449_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notrhs_fu_469_p2 = ((tmp_35_fu_459_p1 == 52'd0) ? 1'b1 : 1'b0);

assign p_shl1_cast_fu_435_p1 = tmp_62_fu_427_p3;

assign p_shl_cast_fu_423_p1 = tmp_61_fu_415_p3;

assign sum_to_int_fu_445_p1 = sum_reg_270;

assign tmp_10_cast_fu_607_p1 = tmp_s_fu_596_p2;

assign tmp_10_fu_602_p1 = tmp_s_fu_596_p2;

assign tmp_11_fu_621_p2 = (j_reg_304 + 5'd5);

assign tmp_12_cast_fu_632_p1 = tmp_11_fu_621_p2;

assign tmp_12_fu_627_p1 = tmp_11_fu_621_p2;

assign tmp_13_fu_646_p2 = (j_reg_304 + 5'd6);

assign tmp_14_cast_fu_657_p1 = tmp_13_fu_646_p2;

assign tmp_14_fu_652_p1 = tmp_13_fu_646_p2;

assign tmp_15_fu_671_p2 = (j_reg_304 + 5'd7);

assign tmp_16_cast_fu_682_p1 = tmp_15_fu_671_p2;

assign tmp_16_fu_677_p1 = tmp_15_fu_671_p2;

assign tmp_17_fu_696_p2 = (j_reg_304 + 5'd8);

assign tmp_18_cast_fu_707_p1 = tmp_17_fu_696_p2;

assign tmp_18_fu_702_p1 = tmp_17_fu_696_p2;

assign tmp_1_fu_411_p1 = i_reg_282;

assign tmp_2_fu_496_p2 = ((j_reg_304 < 5'd18) ? 1'b1 : 1'b0);

assign tmp_35_fu_459_p1 = sum_to_int_fu_445_p1[51:0];

assign tmp_3_cast_fu_507_p1 = j_reg_304;

assign tmp_3_fu_502_p1 = j_reg_304;

assign tmp_42_fu_475_p2 = (notrhs_fu_469_p2 | notlhs_fu_463_p2);

assign tmp_44_fu_481_p2 = (tmp_43_fu_347_p2 & tmp_42_fu_475_p2);

assign tmp_4_fu_521_p2 = (j_reg_304 + 5'd1);

assign tmp_5_cast_fu_532_p1 = tmp_4_fu_521_p2;

assign tmp_5_fu_527_p1 = tmp_4_fu_521_p2;

assign tmp_61_fu_415_p3 = {{i_reg_282}, {4'd0}};

assign tmp_62_fu_427_p3 = {{i_reg_282}, {1'd0}};

assign tmp_63_fu_439_p2 = (p_shl1_cast_fu_435_p1 + p_shl_cast_fu_423_p1);

assign tmp_64_cast_fu_516_p1 = tmp_64_fu_511_p2;

assign tmp_64_fu_511_p2 = (tmp_63_reg_740 + tmp_3_cast_fu_507_p1);

assign tmp_65_cast_fu_541_p1 = tmp_65_fu_536_p2;

assign tmp_65_fu_536_p2 = (tmp_63_reg_740 + tmp_5_cast_fu_532_p1);

assign tmp_66_cast_fu_566_p1 = tmp_66_fu_561_p2;

assign tmp_66_fu_561_p2 = (tmp_63_reg_740 + tmp_7_cast_fu_557_p1);

assign tmp_67_cast_fu_591_p1 = tmp_67_fu_586_p2;

assign tmp_67_fu_586_p2 = (tmp_63_reg_740 + tmp_9_cast_fu_582_p1);

assign tmp_68_cast_fu_616_p1 = tmp_68_fu_611_p2;

assign tmp_68_fu_611_p2 = (tmp_63_reg_740 + tmp_10_cast_fu_607_p1);

assign tmp_69_cast_fu_641_p1 = tmp_69_fu_636_p2;

assign tmp_69_fu_636_p2 = (tmp_63_reg_740 + tmp_12_cast_fu_632_p1);

assign tmp_6_fu_546_p2 = (j_reg_304 + 5'd2);

assign tmp_70_cast_fu_666_p1 = tmp_70_fu_661_p2;

assign tmp_70_fu_661_p2 = (tmp_63_reg_740 + tmp_14_cast_fu_657_p1);

assign tmp_71_cast_fu_691_p1 = tmp_71_fu_686_p2;

assign tmp_71_fu_686_p2 = (tmp_63_reg_740 + tmp_16_cast_fu_682_p1);

assign tmp_72_cast_fu_716_p1 = tmp_72_fu_711_p2;

assign tmp_72_fu_711_p2 = (tmp_63_reg_740 + tmp_18_cast_fu_707_p1);

assign tmp_7_cast_fu_557_p1 = tmp_6_fu_546_p2;

assign tmp_7_fu_552_p1 = tmp_6_fu_546_p2;

assign tmp_8_fu_571_p2 = (j_reg_304 + 5'd3);

assign tmp_9_cast_fu_582_p1 = tmp_8_fu_571_p2;

assign tmp_9_fu_577_p1 = tmp_8_fu_571_p2;

assign tmp_fu_449_p4 = {{sum_to_int_fu_445_p1[62:52]}};

assign tmp_s_fu_596_p2 = (j_reg_304 + 5'd4);

always @ (posedge ap_clk) begin
    tmp_1_reg_735[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_63_reg_740[0] <= 1'b0;
end

endmodule //svm5
